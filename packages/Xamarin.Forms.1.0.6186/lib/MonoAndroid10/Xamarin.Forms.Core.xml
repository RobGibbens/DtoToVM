<doc>
    <assembly>
        <name>Xamarin.Forms.Core</name>
    </assembly>
    <members>
        <member name="T:Xamarin.Forms.AbsoluteLayout">
            <summary>Positions child elements at absolute requested positions.</summary>
            <remarks>User assigned anchors and bounds defines the position and size of the control.</remarks>
        </member>
        <member name="C:Xamarin.Forms.AbsoluteLayout">
            <summary>Initializes a new instance of the AbsoluteLayout class.</summary>
            <remarks>
                <para>
                    <example>
              The following example shows the initialization of a new AbsoluteLayout with children.
              <code lang="C#"><![CDATA[
var layout = new AbsoluteLayout {
  Children = {
    firstChild,
    secondChild,
    thirdChild
  }
};
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.AbsoluteLayout.AutoSize">
            <summary>A value indicating the width or height of the child should be sized to that childs native size.</summary>
            <value />
            <remarks>Setting the width or height of an elements AbsoluteBounds when adding to the layout will cause that element to be measured during the layout pass and sized appropriately.</remarks>
        </member>
        <member name="P:Xamarin.Forms.AbsoluteLayout.Children">
            <summary>Gets the collection of child elements of the AbsoluteLayout.</summary>
            <value>The collection of child elements. The default is an empty collection.</value>
            <remarks>
                <para>You can use implicit collection syntax in XAML to add items.</para>
                <para>This property is the ContentPropertyAttribute for the AbsoluteLayout class. It doesn't need to be explicitly declared.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.GetLayoutBounds(Xamarin.Forms.BindableObject)">
            <param name="bindable">The bindable object to get the layout bounds for.</param>
            <summary>Gets the layout bounds of a bindable object that will be used to size a view that is added to the layout.</summary>
            <returns>The layout bounds of the object.</returns>
            <remarks>This is primarily used for XAML. The layout bounds of a child is normally set at add time in an Add override.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.GetLayoutFlags(Xamarin.Forms.BindableObject)">
            <param name="bindable">The bindable object to get the layout flags for.</param>
            <summary>Gets the layout flags of a bindable object that will be used to intepret the layout bounds of a view that is added to the layout.</summary>
            <returns>The layout flags of the object.</returns>
            <remarks>This is primarily used for XAML. The layout flags of a child is normally set at add time in an Add override.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayout.LayoutBoundsProperty">
            <summary>Identifies the LayoutBounds attached bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
            <summary>Positions and sizes the children of an AbsoluteLayout.</summary>
            <remarks>Implementors wishing to change the default behavior of a AbsoluteLayout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayout.LayoutFlagsProperty">
            <summary>Identifies the LayoutFlags attached bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">The child being added.</param>
            <summary>This method is called when a child is added to the AbsoluteLayout.</summary>
            <remarks>Implementors might override this to. It is strongly suggested to call the base method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">The child being removed.</param>
            <summary>This method is called when a child is removed to the AbsoluteLayout.</summary>
            <remarks>Implementors might override this to. It is strongly suggested to call the base method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the AbsoluteLayout to use.</param>
            <param name="heightConstraint">The available height for the AbsoluteLayout to use.</param>
            <summary>TThis method is called during the measure pass of a layout cycle to get the desired size of the AbsoluteLayout.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the AbsoluteLayout.</returns>
            <remarks>Implementors might override this to. It is strongly suggested to call the base method and modify the calculated results.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(Xamarin.Forms.BindableObject,Xamarin.Forms.Rectangle)">
            <param name="bindable">The bindable object to set the layout bounds for.</param>
            <param name="bounds">A Rectangle describing the bounds of the view.</param>
            <summary>Sets the layout bounds of a view that will be used to size it when it is added to the layout.</summary>
            <remarks>This is primarily used for XAML. The layout bounds of a child is normally set at add time in an Add override. Call this method to update the layout of a view post add.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(Xamarin.Forms.BindableObject,Xamarin.Forms.AbsoluteLayoutFlags)">
            <param name="bindable">The bindable object to set the layout flags for.</param>
            <param name="flags">A <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> describing the how to interpret the layout bounds.</param>
            <summary>Sets the layout flags of a view that will be used to interpret the layout bounds set on it when it is added to the layout.</summary>
            <remarks>This is primarily used for XAML. The layout flags of a child is normally set at add time in an Add override. Call this method to update the layout flags of a view post add.</remarks>
        </member>
        <member name="T:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1">
            <typeparam name="T">The type of elements in the absolute layout.</typeparam>
            <summary>List interface with overloads for adding elements to an absolute layout.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1.Add(`0,Xamarin.Forms.Point)">
            <param name="view">The view to add.</param>
            <param name="position">The location at which to position the view.</param>
            <summary>Adds a view to the list at the specified location with automatic sizing.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.AbsoluteLayout.IAbsoluteList`1.Add(`0,Xamarin.Forms.Rectangle,Xamarin.Forms.AbsoluteLayoutFlags)">
            <param name="view">The view to add.</param>
            <param name="bounds">The bounds to layout the view with.</param>
            <param name="flags">The flags to interpret bounds with.</param>
            <summary>Adds a view to the list with the specified bounds and flags.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.AbsoluteLayoutFlags">
            <summary>Flags used to modify how AbsoluteBounds are interpreted in an AbsoluteLayout.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.All">
            <summary>Enable all flags.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.HeightProportional">
            <summary>Interpret height property as proportional to layout height.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.None">
            <summary>Disable all flags.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.PositionProportional">
            <summary>Equivalent to both XProportional | YProportional.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.SizeProportional">
            <summary>Equivalent to both WidthProportional | HeightProportional.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.WidthProportional">
            <summary>Interpret width property as proportional to layout width.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.XProportional">
            <summary>Interpret x property as proportional to the remaining space after width is accounted for.</summary>
        </member>
        <member name="F:Xamarin.Forms.AbsoluteLayoutFlags.YProportional">
            <summary>Interpret y property as proportional to the remaining space after height is accounted for.</summary>
        </member>
        <member name="T:Xamarin.Forms.ActivityIndicator">
            <summary>A visual control used to indicate that something is ongoing.</summary>
            <remarks>This control gives a visual clue to the user that somehting is happening, without information about it's progress.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ActivityIndicator">
            <summary>Initializes a new instance of the ActivityIndicator class.</summary>
            <remarks>
                <para>
                    <example lang="C#">
              The following example shows the initialization of a running ActivityIndicator.
              <code lang="C#"><![CDATA[
var indicator = new ActivityIndicator {
  IsRunning = true,
};
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.ActivityIndicator.Color">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> of the ActivityIndicator. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Color" /> used to display the ActivityIndicator. Default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ActivityIndicator.ColorProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ActivityIndicator.IsRunning">
            <summary>Gets or sets the value indicating if the ActivityIndicator is running. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating if the ActivityIndicator is running.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ActivityIndicator.IsRunningProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Animation">
            <summary>Encapsulates an animation, a collection of functions that modify properties over a user-perceptible time period.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Animation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Animation(System.Action{System.Double},System.Double,System.Double,Xamarin.Forms.Easing,System.Action)">
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Add(System.Double,System.Double,Xamarin.Forms.Animation)">
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <param name="animation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Commit(Xamarin.Forms.IAnimatable,System.String,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="owner">To be added.</param>
            <param name="name">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.GetCallback">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.Insert(System.Double,System.Double,Xamarin.Forms.Animation)">
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <param name="animation">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.WithConcurrent(Xamarin.Forms.Animation,System.Double,System.Double)">
            <param name="animation">To be added.</param>
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Animation.WithConcurrent(System.Action{System.Double},System.Double,System.Double,Xamarin.Forms.Easing,System.Double,System.Double)">
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="beginAt">To be added.</param>
            <param name="finishAt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.AnimationExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.Animation" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AbortAnimation(Xamarin.Forms.IAnimatable,System.String)">
            <param name="self">To be added.</param>
            <param name="handle">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,Xamarin.Forms.Animation,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="animation">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.Double,System.Double,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Animate``1(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,``0},System.Action{``0},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{``0,System.Boolean},System.Func{System.Boolean})">
            <typeparam name="T">To be added.</typeparam>
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="transform">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="rate">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <param name="finished">To be added.</param>
            <param name="repeat">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AnimateKinetic(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,System.Double,System.Boolean},System.Double,System.Double,System.Action)">
            <param name="self">To be added.</param>
            <param name="name">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="velocity">To be added.</param>
            <param name="drag">To be added.</param>
            <param name="finished">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.AnimationIsRunning(Xamarin.Forms.IAnimatable,System.String)">
            <param name="self">To be added.</param>
            <param name="handle">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.AnimationExtensions.Interpolate(System.Double,System.Double,System.Double,System.Boolean)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="reverseVal">To be added.</param>
            <param name="reverse">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Aspect">
            <summary>Defines how a control adjust its content.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Aspect.AspectFill">
            <summary>Scale the content to fill the view. Some parts may be clipped in order to fill the view.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Aspect.AspectFit">
            <summary>Scale the content to fit the view. Some parts may be left empty (letter boxing).</summary>
        </member>
        <member name="F:Xamarin.Forms.Aspect.Fill">
            <summary>Scale the content so it exactly fill the view. Scaling may not be uniform in X and Y.</summary>
        </member>
        <member name="T:Xamarin.Forms.BindableObject">
            <summary>A base class for everything supporting <see cref="T:Xamarin.Forms.BindableProperty" />.</summary>
            <remarks>
                <para>A <see cref="T:Xamarin.Forms.BindableObject" /> maintains a correspondence between a set of <see cref="T:Xamarin.Forms.BindableProperty" />s and their corresponding <see cref="T:Xamarin.Forms.BindingBase" />s. Those correspondences work in the context of the <see cref="T:Xamarin.Forms.BindingObject" />'s <see cref="P:Xamarin.Forms.BindingObject.BindingContext" />, which can be any <see cref="T:System.Object" />.</para>
                <para>The following diagram and code illustrate a very simple binding sequence.</para>
                <para>
                    <img href="BindableObject.BasicInitialization.png" />
                </para>
                <example>
                    <code lang="C#"><![CDATA[
class PersonViewModel {
    public string Name { get; set; }
    public string Company { get; set; }
}          

BindableObject label = new Label(); //Explicit upcast for clarity
label.BindingContext = new PersonViewModel { Name = "John", Company = "Xamarin" };
BindingBase bb = Binding.Create&lt;PersonViewModel&gt;(vm =&gt; vm.Name); //Or new Binding("Name")
label.SetBinding(Label.TextProperty, bb);
Console.WriteLine(label.Text); //Outputs "John"
          ]]></code>
                </example>
                <para>In this example, the <see cref="T:Xamarin.Forms.BindableObject" /> is a <see cref="T:Xamarin.Forms.Label" /> (the code makes an upcast to make this explicit: all <see cref="T:Xamarin.Forms.Element" />s are subclasses of <see cref="T:Xamarin.Forms.BindableObject" />). The <see cref="T:Xamarin.Forms.BindableProperty" /> is the label's <see cref="P:Xamarin.Forms.Label.Text" /> and its corresponding <see cref="T:Xamarin.Forms.BindingBase" /> is specified here using the <see cref="M:Xamarin.Forms.Binding.Create`1" /> method.</para>
                <para>This code is intended to show the classes involved. In practice, the same binding could be produced with <c>label.SetBinding(Label.TextProperty, "Name")</c>.</para>
                <para>Far more complex bindings are possible, see the discussion at <see cref="C:Xamarin.Forms.Binding" /> for details. </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.BindableObject">
            <summary>Initializes a new instance of the BindableObject class.</summary>
            <remarks>The <see cref="T:Xamarin.Forms.BindableObject" /> class is abstract, and this constructor is protected. It is invoked by child constructors.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ApplyBindings(System.Object)">
            <param name="oldContext">The old binding context. This parameter is optional.</param>
            <summary>Apply the bindings to the <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <remarks>If <paramref name="oldContext" /> is set, bindings are first unapplied from <paramref name="oldContext" />.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableObject.BindingContext">
            <summary>Gets or sets the context for the bindings.</summary>
            <value>An <see cref="T:System.Object" /> representing the binding context. This is a bindable property.</value>
            <remarks>
                <para>The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
Debug.WriteLine (label.Text); //prints "John Doe"
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.BindableObject.BindingContextChanged">
            <summary>The BindingContextChanged event is fired whenever the <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> property changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.BindableObject.BindingContextProperty">
            <summary>Identifies the BindingContext bindable property.</summary>
            <remarks>
                <para>The following example shows how to set a binding to the BindingContext:</para>
                <example>
                    <code lang="C#"><![CDATA[
class PersonView : ContentView 
{
  public PersonView ()
  {
    var label = new Label ();
    label.SetBinding (Label.TextProperty, "Name");
    Content = label;
  }
}

var stack = new StackLayout {
  Orientation = StackOrientation.Vertical,  
};

var jane = new PersonView ();
jane.SetBinding (BindableObject.BindingContext, "Jane");
stack.Children.Add (jane);

var john = new PersonView ();
john.SetBinding (BindableObject.BindingContext, "John");
stack.Children.Add (john);

stack.BindingContext = new {Jane = new {Name = "Jane Doe"}, John = new {Name = "John Doe"}};
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty to clear.</param>
            <summary>Clears any value set by <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> for property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey)">
            <param name="propertyKey">The BindablePropertyKey to clear.</param>
            <summary>Clears any value set by <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> for propertyKey.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty to get the value from.</param>
            <summary>Returns the value of the BindableProperty.</summary>
            <returns>An <see cref="T:System.Object" /> corresponding to the value of the BindableProperty.</returns>
            <remarks>
                <para>
                    <see cref="M:Xamarin.Forms.BindableObject.GetValue" /> and <see cref="M:Xamarin.Forms.BindableObject.SetValue" /> are mainly used while implementing properties having a <see cref="T:Xamarin.Forms.BindableProperty" /> as backend storage:</para>
                <example>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
  public static readonly BindableProperty MyProperty = 
    BindableProperty.Create&lt;MyBindable, string&gt; (w =&gt; w.My, default(string));

  public string My {
    get { return (string)GetValue (MyProperty); }
    set { SetValue (MyProperty, value); } 
  }
}
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnBindingContextChanged">
            <summary>Override this method to execute an action when the BindingContext changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the changed property.</param>
            <summary>Call this method from a child class to notify that a change happened on a property.</summary>
            <remarks>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the changing property.</param>
            <summary>Call this method from a child class to notify that a change is going to happen on a property.</summary>
            <remarks>A <see cref="T:Xamarin.Forms.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Xamarin.Forms.BindableProperty" /> as the backend store.</remarks>
        </member>
        <member name="E:Xamarin.Forms.BindableObject.PropertyChanged">
            <summary>Fired when a property has changed.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.BindableObject.PropertyChanging">
            <summary>Fired when a property is about to change.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty)">
            <param name="property">The BindableProperty from which to remove bindings.</param>
            <summary>Removes a previously set binding.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty,Xamarin.Forms.BindingBase)">
            <param name="targetProperty">The BindableProperty on which to set a binding.</param>
            <param name="binding">The binding to set.</param>
            <summary>Assigns a binding to a property.</summary>
            <remarks>
                <para>The following example shows how to set a binding to a property:</para>
                <example>
                    <code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, new Binding ("Name"));
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetInheritedBindingContext(Xamarin.Forms.BindableObject,System.Object)">
            <param name="bindable">The object on which to set the inherited binding context.</param>
            <param name="value">The inherited context to set.</param>
            <summary>Sets the inherited context to a nested element.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">The BindableProperty on which to assign a value.</param>
            <param name="value">The value to set.</param>
            <summary>Sets the value of the specified property.</summary>
            <remarks>
                <para>GetValue and SetValue are mainly used while implementing properties having a BindingProperty as backend storage:</para>
                <example>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
  public static readonly BindableProperty MyProperty = 
    BindableProperty.Create&lt;MyBindable, string&gt; (w =&gt; w.My, default(string));

  public string My {
    get { return (string)GetValue (MyProperty); }
    set { SetValue (MyProperty, value); } 
  }
}
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey,System.Object)">
            <param name="propertyKey">The BindablePropertyKey on which to assign a value.</param>
            <param name="value">The value to set.</param>
            <summary>Sets the value of the propertyKey.</summary>
            <remarks>
                <para>This method and <see cref="T:Xamarin.Forms.BindablePropertyKey" /> are useful to implement BindableProperties with limited write access. The write access is limited to the scope of the BindablePropertyKey.</para>
                <para>The following example shows how to declare a BindableProperty with "internal" write access.</para>
                <example>
                    <code lang="C#"><![CDATA[
class MyBindable : BindableObject
{
  internal static readonly BindablePropertyKey MyPropertyKey = 
    BindableProperty.CreateReadOnly&lt;MyBindable, string&gt; (w =&gt; w.My, default(string));
  public static readonly BindableProperty MyProperty = MyPropertyKey.BindableProperty;

  public string My {
    get { return (string)GetValue (MyProperty); }
    internal set { SetValue (MyPropertyKey, value); } 
  }
}
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObject.UnapplyBindings">
            <summary>Unapply all the bindings.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.BindableObjectExtensions">
            <summary>Contains convenience extension methods for <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableObjectExtensions.SetBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String)">
            <param name="self">The <see cref="T:Xamarin.Forms.BindableObject" />.</param>
            <param name="targetProperty">The BindableProperty on which to set a bindinge.</param>
            <param name="path">A <see cref="T:System.String" /> indicating the property path to bind to.</param>
            <summary>Creates and applies a binding to a property.</summary>
            <remarks>
                <para>
                    <example language="C#">The following example shows how to use the extension method to set a binding.<code lang="C#"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {Name = "John Doe", Company = "Xamarin"};
Debug.WriteLine (label.Text); //prints "John Doe"
        ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableObjectExtensions.SetBinding``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)">
            <typeparam name="TSource">The source type.</typeparam>
            <param name="self">The BindableObject.</param>
            <param name="targetProperty">The BindableProperty to bind to</param>
            <param name="sourceProperty">An expression used to retrieve the source path.</param>
            <param name="mode">The BindingMode for the binding. This parameter is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">An IValueConverter for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Creates and applies a binding from an expression.</summary>
            <remarks>
                <para>This extension method uses Expression instead of path to creates and sets bindings. Using Expressions is more refactoring friendly.</para>
                <para>
                    <example language="C#">This following example illustrates the setting of a binding using the extension method.<code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

var label = new Label ();
label.SetBinding&lt;PersonViewModel&gt; (Label.TextProperty, vm =&gt; vm.Name);
label.BindingContext = new PersonViewModel {
  Name = "John Doe", 
  Company = "Xamarin"
};
Debug.WriteLine (label.Text); //prints "John Doe"
      ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty">
            <summary>A BindableProperty is a backing store for properties allowing bindings on <see cref="T:Xamarin.Forms.BindableObject" />.</summary>
            <remarks>
                <para>
                    <example language="C#">The following example shows the creation of a BindableProperty as a backing store for a property. It shows also how to bind to that BindableProperty.<code lang="C#"><![CDATA[
public class MockBindable : BindableObject
{
  public static readonly BindableProperty FooProperty = 
    BindableProperty.Create&lt;MockBindable, string&gt; (w =&gt; w.Foo, default(string));

  public string Foo {
    get { return (string)GetValue (FooProperty); }
    set { SetValue (FooProperty, value); } 
  }
}

public class MockViewModel
{
  public string Name {get;set;}
}

MockViewModel model = new MockViewModel { Name = "John Doe" };
var bindable = new MockBindable ();
bindable.SetBinding (MockBindable.FooProperty, "Name");
bindable.BindingContext = model;
Console.WriteLine (bindable.Foo); //prints "John Doe"
    ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="bindingPropertyChanged">To be added.</param>
            <param name="bindingPropertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>Prefer this overload using an expression to the one using a property name when you can, as it makes code more resilient to refactoring.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttached``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="bindingPropertyChanged">To be added.</param>
            <param name="bindingPropertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindableProperty.</returns>
            <remarks>
                <para>An attached BindableProperty is a kind of BindableProperty meant to be applied to another class.</para>
                <para>
                    <example language="C#">The following example shows hte declaration and usage of an attached BindableProperty:<code lang="C#"><![CDATA[
public class Bindable : BindableObject
{
}

public class MyClass
{
  public static readonly BindableProperty FooProperty = 
    BindableProperty.CreateAttached&lt;MyClass, string&gt; (bindable =&gt; GetFoo (bindable), default(string));

  public static string GetFoo (BindableObject bindable)
  {
    return (string)bindable.GetValue (FooProperty);
  }

  public static void SetFoo (BindableObject bindable, string value)
  {
    bindable.SetValue (FooProperty, value);
  }
}

public class MockViewModel
{
  public string Name {get;set;}
}

MockViewModel model = new MockViewModel { Name = "John Doe" };
var bindable = new MockBindable ();
bindable.SetBinding (MyClass.FooProperty, "Name");
bindable.BindingContext = model;
Console.WriteLine (MyClass.GetFoo (bindable)); //prints "John Doe"
      ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateAttachedReadOnly``2(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.BindableObject,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="staticgetter">An expression identifying a static method returning the value of the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="bindingPropertyChanged">To be added.</param>
            <param name="bindingPropertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindablePropertyKey class.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly(System.String,System.Type,System.Type,System.Object,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate,Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate,Xamarin.Forms.BindableProperty+CoerceValueDelegate)">
            <param name="propertyName">The name of the BindableProperty.</param>
            <param name="returnType">The type of the property.</param>
            <param name="declaringType">The type of the declaring object.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="propertyChanged">A delegate to be ran when the value has changed. This parameter is optional. Default is null.</param>
            <param name="propertyChanging">A delegate to be ran when the value will change. This parameter is optional. Default is null.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindablePropertyKey class.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.BindableProperty.CreateReadOnly``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,Xamarin.Forms.BindingMode,Xamarin.Forms.BindableProperty+ValidateValueDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate{``1},Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate{``1},Xamarin.Forms.BindableProperty+CoerceValueDelegate{``1})">
            <typeparam name="TDeclarer">The type of the declaring object.</typeparam>
            <typeparam name="TPropertyType">The type of the property.</typeparam>
            <param name="getter">An expression identifying the getter for the property using this BindableProperty as backing store.</param>
            <param name="defaultValue">Default value for the BindableProperty.</param>
            <param name="defaultBindingMode">The BindingMode to use on SetBinding() if no BindingMode is given. This parameter is optional. Default is BindingMode.OneWay.</param>
            <param name="validateValue">A delegate to be ran when a value is set. This parameter is optional. Default is null.</param>
            <param name="bindingPropertyChanged">To be added.</param>
            <param name="bindingPropertyChanging">To be added.</param>
            <param name="coerceValue">A delegate used to coerce the range of a value. This parameter is optional. Default is null.</param>
            <summary>Creates a new instance of the BindableProperty class.</summary>
            <returns>A newly created BindablePropertyKey.</returns>
            <remarks>
                <para>A BindablePropertyKey is used to restrict write access to a property, either via SetValue() or binding. A BindableProperty is usually defined too, to give broader read access</para>
                <para>
                    <example language="C#">The following example shows the creation of a BindablePropertyKey.<code lang="C#"><![CDATA[
class Bindable : BindableObject
{
  internal static readonly BindablePropertyKey FooPropertyKey = 
    BindableProperty.CreateReadOnly&lt;Bindable, string&gt; (w =&gt; w.Foo, default(string));
    
  public static readonly BindableProperty FooProperty = FooPropertyKey.BindableProperty;

  public string Foo {
    get { return (string)GetValue (FooProperty); }
    internal set { SetValue (FooPropertyKey, value); } 
  }
}
      ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DeclaringType">
            <summary>Gets the type declaring the BindableProperty</summary>
            <value />
            <remarks>Unused</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DefaultBindingMode">
            <summary>Gets the default BindingMode.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.DefaultValue">
            <summary>Gets the default value for the BindableProperty.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.IsReadOnly">
            <summary>Gets a value indicating if the BindableProperty is created form a BindablePropertyKey.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.PropertyName">
            <summary>Gets the property name.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BindableProperty.ReturnType">
            <summary>Gets the type of the BindableProperty.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+BindingPropertyChangedDelegate">
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Delegate for BindableProperty.PropertyChanged.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.BindingPropertyChangedDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.PropertyChanged.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+BindingPropertyChangingDelegate">
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Delegate for BindableProperty.PropertyChanging.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.BindingPropertyChangingDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.PropertyChanging.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+CoerceValueDelegate">
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Delegate for BindableProperty.CoerceValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.CoerceValueDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.CoerceValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty+ValidateValueDelegate">
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Delegate for BindableProperty.ValidateValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindableProperty.ValidateValueDelegate`1">
            <typeparam name="TPropertyType">To be added.</typeparam>
            <param name="bindable">To be added.</param>
            <param name="value">To be added.</param>
            <summary>Strongly-typed delegate for BindableProperty.ValidateValue.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BindablePropertyKey">
            <summary>The secret key to a BindableProperty, used to implement a BindableProperty with restricted write access.</summary>
            <remarks>
                <para>
                    <example language="C#">The following example shows the creation of a BindablePropertyKey. Write access is <see langword="internal" /> while read access is <see langword="public" />.<code lang="C#"><![CDATA[
class Bindable : BindableObject
{
  internal static readonly BindablePropertyKey FooPropertyKey = 
    BindableProperty.CreateReadOnly&lt;Bindable, string&gt; (w =&gt; w.Foo, default(string));

  public static readonly BindableProperty FooProperty = FooPropertyKey.BindableProperty;

  public string Foo {
    get { return (string)GetValue (FooProperty); }
    internal set { SetValue (FooPropertyKey, value); } 
  }
}
      ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.BindablePropertyKey.BindableProperty">
            <summary>Gets the BindableProperty.</summary>
            <value>A BindableProperty used for read access.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Binding">
            <summary>A single 1:1 immutable data binding.</summary>
            <remarks>This class is immutable.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Binding(System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String)">
            <param name="path">The property path.</param>
            <param name="mode">The binding mode. This property is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>Initializes a new instance of the Binding class.</summary>
            <remarks>
                <para>
                    <example language="C#">The following example shows how to set a binding to a property with a BindingMode and Converter:<code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

public class ReverseConverter : IValueConverter
{
  public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }

  public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
  {
    var s = value as string;
    if (s == null)
      return value;
    return new string (s.Reverse ().ToArray ());
  }
}

var label = new Label ();
PersonViewModel person;
label.BindingContext = person = new PersonViewModel { Name = "John Doe", Company= "Xamarin" };
label.SetBinding (Label.TextProperty, new Binding ("Name", mode: BindingMode.TwoWay, converter: new ReverseConverter ()));
Debug.WriteLine (label.Text); //prints "eoD nhoJ". ReverseConverter.Convert () is invoked in this case.

label.Text = "ooF";
Debug.WriteLine (person.Name); //prints "Foo". ReverseConverter.ConvertBack () is invoked in this case. The label Text change is propagated back as the BindingMode is TwoWay.
        ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Binding.Converter">
            <summary>Gets the converter to be used for this binding ?</summary>
            <value>An IValueConverter, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Binding.ConverterParameter">
            <summary>Gets the parameter passed as argument to the converter.</summary>
            <value>An object, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Binding.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String)">
            <typeparam name="TSource">The type of the source of the binding.</typeparam>
            <param name="propertyGetter">An expression used to retrieve the binding path.</param>
            <param name="mode">The binding mode. This property is optional. Default is <see cref="E:Xamarin.Forms.BindingMode.Default" />.</param>
            <param name="converter">The converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="converterParameter">An user-defined parameter to pass to the converter. This parameter is optional. Default is <see langword="null" />.</param>
            <param name="stringFormat">A String format. This parameter is optional. Default is <see langword="null" />.</param>
            <summary>This is a convenient factory method to create a binding from an expression, instead of a property name. This api is more resilient to refactoring.</summary>
            <returns>A newly created binding.</returns>
            <remarks>
                <para>
                    <example language="C#">The following example shows how to set a binding to a property :<code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

var label = new Label ();
PersonViewModel person;
label.BindingContext = person = new PersonViewModel { Name = "John Doe", Company= "Xamarin" };
label.SetBinding (Label.TextProperty, Binding.Create&lt;PersonViewModel&gt; (vm =&gt; vm.Name));
Debug.WriteLine (label.Text); //prints "John Doe".
        ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Binding.Path">
            <summary>Gets the path of the property</summary>
            <value>A string indicating the path to the property.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.BindingBase">
            <summary>An abstract class that provides a <see cref="T:Xamarin.Forms.BindingMode" /> and a formatting option.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingBase.DisableCollectionSynchronization(System.Collections.IEnumerable)">
            <param name="collection">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,Xamarin.Forms.CollectionSynchronizationCallback)">
            <param name="collection">To be added.</param>
            <param name="context">To be added.</param>
            <param name="callback">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingBase.Mode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.BindingBase.StringFormat">
            <summary>Gets or sets the string format for this binding.</summary>
            <value>
          A string specifying the format for the value of this binding.
        </value>
            <remarks>
                <para>
            Used for providing a display format for the binding value or compositing the value with other
            text. Implementors of <see cref="T:Xamarin.Forms.BindingBase" /> decide how the string format is utilized, but
            all support standard <see cref="M:System.String.Format" /> conventions.
          </para>
                <para>
                    <see cref="T:Xamarin.Forms.Binding" /> allows for one argument for its singular value.
          </para>
                <example>
                    <para>
              A simple example showing compositing text and determining the display format for the value with a
              <see cref="T:Xamarin.Forms.Binding" /></para>
                    <code language="C#"><![CDATA[
Label label = new Label();
label.AddBinding (new Binding (Label.TextProperty, "Price") {
  StringFormat = "Price: {0:C2}"
});
]]></code>
                </example>
            </remarks>
            <altmember cref="M:System.String.Format" />
        </member>
        <member name="T:Xamarin.Forms.BindingMode">
            <summary>The direction of changes propagation for bindings.</summary>
            <remarks>
                <para>
                    <example language="C#">The following examples shows some BindingMode use cases.<code lang="C#"><![CDATA[
public class PersonViewModel
{
  public string Name { get; set; }
  public string Company { get; set; }
}

Label label;
PersonViewModel viewmodel;

//BindingMode.OneWay
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding&lt;PersonViewModel&gt; (Label.TextProperty, vm =&gt; vm.Name, mode: BindingMode.OneWay);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints "John Doe"
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "John Doe"


//BindingMode.TwoWay
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding&lt;PersonViewModel&gt; (Label.TextProperty, vm =&gt; vm.Name, mode: BindingMode.TwoWay);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints "John Doe"
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "Foo"


//BindingMode.OneWayToSource
label = new Label ();
label.BindingContext = viewmodel = new PersonViewModel ();
label.SetBinding&lt;PersonViewModel&gt; (Label.TextProperty, vm =&gt; vm.Name, mode: BindingMode.OneWayToSource);

viewmodel.Name = "John Doe";
Debug.WriteLine (label.Text); //prints ""
label.Text = "Foo";
Debug.WriteLine (viewmodel.Name); //prints "Foo"
    ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.Default">
            <summary>When used in Bindings, indicates that the Binding should use the <see cref="P:Xamarin.Forms.BindableProperty.DefaultBindingMode" />. When used in BindableProperty declaration, defaults to BindingMode.OneWay.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.OneWay">
            <summary>Indicates that the binding should only propagates changes from source (usually the View Model) to target (the BindableObject). This is the default mode for most BindableProperty values.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.OneWayToSource">
            <summary>Indicates that the binding should only propagates changes from target (the BindableObject) to source (usually the View Model). This is mainly used for read-only BindableProperty values.</summary>
        </member>
        <member name="F:Xamarin.Forms.BindingMode.TwoWay">
            <summary>Indicates that the binding should propagates changes from source (usually the View Model) to target (the BindableObject) in both directions.</summary>
        </member>
        <member name="T:Xamarin.Forms.BoundsConstraint">
            <summary>A bounds layout constraint used by <see cref="T:Xamarin.Forms.RelativeLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsConstraint.FromExpression(System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.Rectangle}},System.Collections.Generic.IEnumerable{Xamarin.Forms.View})">
            <param name="expression">To be added.</param>
            <param name="parents">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BoundsTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts strings into <see cref="T:Xamarin.Forms.Rectangle" />s for use with <see cref="T:Xamarin.Forms.AbsoluteLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BoundsTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.BoundsTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.BoxView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> used to draw a solid colored rectangle.</summary>
            <remarks>BoxView is a useful stand-in for images or custom elements when doing initial prototyping. BoxView has a default size request of 40x40. If you need a different size, assign the <see cref="P:Xamarin.Forms.VisualElement.WidthRequest" /> and the <see cref="P:Xamarin.Forms.VisualElement.HeightRequest" />.</remarks>
        </member>
        <member name="C:Xamarin.Forms.BoxView">
            <summary>Initializes a new instance of the BoxView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.BoxView.Color">
            <summary>Gets or sets the color which will fill the rectangle. This is a bindable property.</summary>
            <value>The color that is used to fill the rectangle. The default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.BoxView.ColorProperty">
            <summary>Identifies the Color bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Button">
            <summary>A button <see cref="T:Xamarin.Forms.View" /> which reacts to touch events.</summary>
            <remarks>
                <para>
                    <example lang="C#">
          The following example shows how to construct a new button with a label.
          <code lang="C#"><![CDATA[
  Button btn = new Button {Text = "Click Me!"};
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Button">
            <summary>Initializes a new instance of the Button class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderColor">
            <summary>Gets or sets a color that describes the border stroke color of the button. This is a bindable property.</summary>
            <value>The color that is used as the border stroke color; the default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks>This property has no effect if <see cref="P:Xamarin.Forms.Button.BorderWidth" /> is set to 0. On Android this property will not have an effect unless <see cref="P:Xamarin.Forms.VisualElement.BackgroundColor" /> is set to a non-default color.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.BorderColorProperty">
            <summary>Identifies the BorderColor bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderRadius">
            <summary>Gets or sets the corner radius of the border. This is a bindable property.</summary>
            <value>The corner radius of the button border; the default is 5.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.BorderRadiusProperty">
            <summary>Identifies the BorderRadius bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.BorderWidth">
            <summary>Gets or sets the width of the border. This is a bindable property.</summary>
            <value>The width of the button border; the default is 0.</value>
            <remarks>Set this value to a non-zero value in order to have a visible border.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Button.BorderWidthProperty">
            <summary>Identifies the BorderWidth bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Button.Clicked">
            <summary>Occurs when the Button is clicked.</summary>
            <remarks>The user may be able to raise the clicked event using accessibility or keyboard controls when the Button has focus.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Command">
            <summary>Gets or sets the command to invoke when the button is activated. This is a bindable property.</summary>
            <value>A command to invoke when the butto is activated. The default value is <see langword="null" />.</value>
            <remarks>This property is used to associate a command with an instance of a button. This property is most often set in the MVVM pattern to bind callbacks back into the ViewModel. <see cref="P:Xamarin.Forms.VisualElement.IsEnabled" /> is controlled by the Command if set.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.CommandParameter">
            <summary>Gets or sets the parameter to pass to the Command property. This is a bindable property.</summary>
            <value>A object to pass to the command property. The default value is <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.CommandParameterProperty">
            <summary>Identifies the CommandParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.CommandProperty">
            <summary>Identifies the Command bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Button.Font">
            <summary>Gets or sets the Font for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Font" /> value for the Label. The default is <see langword="null" />, which represents the default font on the platform.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.FontProperty">
            <summary>Identifies the Font bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Button.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the changed property.</param>
            <summary>Call this method from a child class to notify that a change happened on a property.</summary>
            <remarks>A Button triggers this by itself. An inheritor only need to call this for properties without BindableProperty as backend store.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.Text">
            <summary>Gets or sets the Text displayed as the content of the button. This is a bindable property.</summary>
            <value>The text displayed in the button. The default value is <see langword="null" />.</value>
            <remarks>Changing the Text of a button will trigger a layout cycle.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Button.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of the button. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> value.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Button.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.CarouselPage">
            <summary>A Page allowing to swipe between subpages, like a gallery.</summary>
            <remarks>
                <para>
                    <example language="C#">The following example shows the creation and usage of a CarouselPage:<code lang="C#"><![CDATA[
new CarouselPage {
  Children = {
    new ContentPage {Content = new BoxView {Color = new Color (1, 0, 0)}, Title = "Page 1"},
    new ContentPage {Content = new BoxView {Color = new Color (0, 1, 0)}, Title = "Page 2"},
    new ContentPage {Content = new BoxView {Color = new Color (0, 0, 1)}, Title = "Page 3"}
  }
};
      ]]></code></example>
                </para>
                <para>When embedding a CarouselPage into a <see cref="P:Xamarin.Forms.MasterDetailPage.Detail" />, it is recommended to set <see cref="P:Xamarin.Forms.MasterDetailPage.IsGestureEnabled" /> to <see langword="false" /> to prevent CarouselPage and MasterDetailPage gestures to conflicts.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.CarouselPage">
            <summary>Initializes a new instance of the CarouselPage class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.CarouselPage.CreateDefault(System.Object)">
            <param name="item">The object representing the model ofr the page.</param>
            <summary>Invoked to create a ContentPage when no ItemTemplate is specified.</summary>
            <returns>An empty ContentPage.</returns>
            <remarks>Overriden for CarouselPage.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Cell">
            <summary>Provides base class and capabilities for all Forms cells. Cells are elements meant to be added to <see cref="T:Xamarin.Forms.ListView" /> or <see cref="T:Xamarin.Forms.TableView" />.</summary>
            <remarks>
                <para>The subtypes of <see cref="T:Xamarin.Forms.Cell" /> are:</para>
                <list type="table">
                    <listheader>
                        <term>Type</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>EntryCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with a label and a single line text entry field.</description>
                    </item>
                    <item>
                        <term>SwitchCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with a label and an on/off switch.</description>
                    </item>
                    <item>
                        <term>TextCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> with primary and secondary text.</description>
                    </item>
                    <item>
                        <term>ImageCell</term>
                        <description>A <see cref="T:Xamarin.Forms.TextCell" /> that also includes an image.</description>
                    </item>
                    <item>
                        <term>ViewCell</term>
                        <description>A <see cref="T:Xamarin.Forms.Cell" /> containing a developer-defined <see cref="T:Xamarin.Forms.View" />.</description>
                    </item>
                </list>
                <para>The various subclasses are shown in the following image:</para>
                <para>
                    <img href="Cell.Gallery.png" />
                </para>
                <example>
                    <code lang="C#"><![CDATA[
Content = new TableView
{
    Root = new TableRoot ("Table Title")
    {
        new TableSection("Section 1 Title")
        {
            new TextCell
            {
                Text = "TextCell Text",
                Detail = "TextCell Detail"
            },
            new ImageCell
            {
                Text = "ImageCell Text",
                Detail = "ImageCell Detail",
                ImageSource = "http://xamarin.com/images/index/ide-xamarin-studio.png"
            },
            new EntryCell
            {
                Label = "EntryCell:",
                Placeholder = "default keyboard",
                Keyboard = Keyboard.Default
            }
        },
        new TableSection("Section 2 Title")
        {
            new EntryCell
            {
                Label = "Another EntryCell:",
                Placeholder = "phone keyboard",
                Keyboard = Keyboard.Telephone
            },
            new SwitchCell
            {
                Text = "SwitchCell:"
            },
            new ViewCell
            {
                View = new StackLayout
                {
                    Orientation = StackOrientation.Horizontal,
                    Children = 
                    {
                        new Label
                        {
                            Text = "Custom Slider View:"
                        },
                        new Slider
                        {
                        }
                    }
                }
            }
        }
    }
}          
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Cell">
            <summary>Initializes a new instance of the Cell class.</summary>
            <remarks>Cell class is abstract, this constructor is never invoked directly.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Cell.Appearing">
            <summary>Occurs when the visual representation of the Cell is being added to the visual layout.</summary>
            <remarks>This method is gauranteed to fire at some point before the cell is on screen.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Cell.Disappearing">
            <summary>Occurs when the visual representation of the Cell is being removed from the visual layout.</summary>
            <remarks>This method is for virtualization usage only. It is not gauranteed to fire for all visible Cells when the ListView or TableView is removed from the screen. Additionally it fires during virtualization, which may not correspond directly with removal from the screen depending on the platform virtualization technique used.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.Height">
            <summary>Gets or sets the height of the Cell.</summary>
            <value>A double representing the height of the cell.</value>
            <remarks>This is ignored if the ListView or TableView HasUnevenRows property is <see langword="false" />. ListView or TableView RowHeight property is used in that case.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Cell.IsEnabled">
            <summary>Gets or sets the IsEnabled state of the Cell. This is a bindable property.</summary>
            <value>A bool. Default is <see langword="true" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Cell.IsEnabledProperty">
            <summary>Identifies the IsEnabled bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnAppearing">
            <summary>Invoked whenever an <see cref="E:Xamarin.Forms.Cell.Appearing" /> event occurs. Implement this method to add class handling for this event.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnDisappearing">
            <summary>Invoked whenever an <see cref="E:Xamarin.Forms.Cell.Disappearing" /> event occurs. Implement this method to add class handling for this event.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnLongPressed">
            <summary>Invoked whenever a long press is applied to the Cell.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Cell.OnTapped">
            <summary>Invoked whenever the Cell is Tapped.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Cell.RenderHeight">
            <summary>Gets the height of the rendered cell on the device.</summary>
            <value />
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Cell.Tapped">
            <summary>Occurs when the Cell is Tapped.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.CollectionSynchronizationCallback">
            <param name="collection">To be added.</param>
            <param name="context">To be added.</param>
            <param name="accessMethod">To be added.</param>
            <param name="writeAccess">To be added.</param>
            <summary>Delegate for callback in <see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Color">
            <summary>A color.</summary>
            <remarks>This type is immutable. Colors can be expressed in the RGB or HSL modes. The conversion between the modes is done by the Color struct itself.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double)">
            <param name="value">The luminosity of the gray-scale color.</param>
            <summary>Initialize a new gray color.</summary>
            <remarks>This is equivalent to new Color (value, value, value). The value is clamped to [0-1]. Prefer the <see cref="M:Xamarin.Forms.Color.FromRgb" /> equivalent methods.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Initializes a new rgb color.</summary>
            <remarks>This is equivalent to new Color (r, g, b, 1). Values are clamped to [0-1]. Prefer the <see cref="M:Xamarin.Forms.Color.FromRgb" /> equivalent methods.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Color(System.Double,System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha component of the color.</param>
            <summary>Initializes a new rgb color with an alpha channel.</summary>
            <remarks>Values are clamped to [0-1].</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.A">
            <summary>Gets the alpha component of the color.</summary>
            <value>The value (between 0 and 1) for the property.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Color.Accent">
            <summary>Gets the accent or tint color from the application.</summary>
            <value>A Color.</value>
            <remarks>This is platform and device dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.AddLuminosity(System.Double)">
            <param name="delta">The delta (positive or negative) to add to the luminosity channel.</param>
            <summary>Returns a new Color with a modified luminosity channel.</summary>
            <returns>A new color.</returns>
            <remarks>The current luminosity + delta is clapmed to [0,1]. The returned value is not always as requested, but represents a valid Color.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Aqua">
            <summary>Returns the Aqua color.</summary>
            <remarks>Aqua color is 0x00ffff.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.B">
            <summary>Gets the blue component of the color.</summary>
            <value>A double in the 0-1 range..</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Black">
            <summary>Returns the Black color.</summary>
            <remarks>Black is black. Or 0x000000.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Blue">
            <summary>Returns the Blue color.</summary>
            <remarks>Blue is 0x0000ff.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.Default">
            <summary>Returns the default color.</summary>
            <value>The default color.</value>
            <remarks>The Default color is used to unset any Color, and revert to the default one.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> value to compare this Color to.</param>
            <summary>Determine if the provided <see cref="T:System.Object" /> is equivalent to the current Color.</summary>
            <returns>
                <see langword="true" /> if the provided object is an equivalent Color. <see langword="false" /> otherwise.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromHex(System.String)">
            <param name="hex">A string containing the hexadecimal (a)rgb color representation.</param>
            <summary>Returns a new rgb Color instance with the requested r, g, b and optionally a channels.</summary>
            <returns>A color.</returns>
            <remarks>The hex parameter is expected to be of the form #rgb, #argb, #rrggbb or #aarrggbb. The "#" sign is optional. Invalid values will result in unexpected results or conversion exceptions. #rgb (resp. #argb) is a shortcut for #rrggbb (resp. #aarrggbb), meaning the hex value of the component is duplicated.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromHsla(System.Double,System.Double,System.Double,System.Double)">
            <param name="h">The Hue component of the color.</param>
            <param name="s">The Saturation component of the color.</param>
            <param name="l">The Luminosity component of the color.</param>
            <param name="a">The alpha value of the color.</param>
            <summary>Returns a new hsl Color with an alpha channel</summary>
            <returns>An HSL color</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgb(System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Returns a new rgb color instance.</summary>
            <returns>A rgb color</returns>
            <remarks>Components values are clamped to [0,1]. This is striclty equivalent to new Color (r, g, b) and is there for API consitency.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgb(System.Int32,System.Int32,System.Int32)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <summary>Returns a new rgb color instance.</summary>
            <returns>A rgb color</returns>
            <remarks>Components values are clamped to [0,255].</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgba(System.Double,System.Double,System.Double,System.Double)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha channel.</param>
            <summary>Returns a new rgb color instance, with an alpha channel.</summary>
            <returns>A rgb color</returns>
            <remarks>Components values are clamped to [0,1]. This is striclty equivalent to new Color (r, g, b, a) and is there for API consitency.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <param name="a">The alpha channel.</param>
            <summary>Returns a new rgb color instance with an alpha channel.</summary>
            <returns>A rgb color</returns>
            <remarks>Components values are clamped to [0,255].</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.FromUint(System.UInt32)">
            <param name="argb">An uint representing the argb value of the color.</param>
            <summary>Returns a new Color with the request argb value.</summary>
            <returns>A rgb color</returns>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Fuschia">
            <summary>The Fushia color.</summary>
            <remarks>Not pink, but close. Fushia is also known as magenta, and has the #ff00ff rgb value.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.G">
            <summary>Gets the Green component of the color.</summary>
            <value>A double in the [0-1] range.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Color.GetHashCode">
            <summary>Get the Hashcode for this <see cref="T:System.Object" />.</summary>
            <returns>A signed 32-bit hash code.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Gray">
            <summary>The Gray color.</summary>
            <remarks>Gray is #808080.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Green">
            <summary>The Green color.</summary>
            <remarks>Green is #008000</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.Hue">
            <summary>Gets the Hue of the color.</summary>
            <value>The hue in the [0-1] range.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Lime">
            <summary>The Lime color.</summary>
            <remarks>Lime is #00ff00.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.Luminosity">
            <summary>Gets the Luminosity fo the color.</summary>
            <value>The luminosity in the [0-1] range.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Maroon">
            <summary>The Maroon color.</summary>
            <remarks>Maroon is #800000</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.MultiplyAlpha(System.Double)">
            <param name="alpha">The alpha multiplicator.</param>
            <summary>Returns a new color with the alpha channel multiplied by alpha.</summary>
            <returns>A color.</returns>
            <remarks>Multiplied alpha channel is clamped to [0,1].</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Navy">
            <summary>The Navy color.</summary>
            <remarks>Navy is #000080.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Olive">
            <summary>The Olive color.</summary>
            <remarks>Olive is #808000.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.op_Equality(Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <param name="color1">To be added.</param>
            <param name="color2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.op_Inequality(Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <param name="color1">To be added.</param>
            <param name="color2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Purple">
            <summary>The Purple color.</summary>
            <remarks>Purple is #800080.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.R">
            <summary>Gets the Red component of the color.</summary>
            <value>A double in the [0,1] range.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Red">
            <summary>The Red color.</summary>
            <remarks>Red is #ff0000</remarks>
        </member>
        <member name="P:Xamarin.Forms.Color.Saturation">
            <summary>Gets the Saturation of the color</summary>
            <value>A double in the [0,1] range.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Color.Silver">
            <summary>The Silver color.</summary>
            <remarks>Silver is #c0c0c0</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Teal">
            <summary>The Teal color.</summary>
            <remarks>Teal is #008080</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.ToString">
            <summary>Returns a string representation of the Color.</summary>
            <returns>A string.</returns>
            <remarks>Overriden. </remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Transparent">
            <summary>The transparent color.</summary>
            <remarks>Transparent if #00000000</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.White">
            <summary>The White color.</summary>
            <remarks>White is #ffffff</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.WithHue(System.Double)">
            <param name="hue">The modified Hue.</param>
            <summary>Returns a color with modified Hue, but keeping the same Saturation and Luminosity.</summary>
            <returns>A color.</returns>
            <remarks>The Hue is clamped to [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.WithLuminosity(System.Double)">
            <param name="luminosity">The modified luminosity.</param>
            <summary>Returns a color with modified Luminosity, but keeping the same Saturation and Hue.</summary>
            <returns>A color.</returns>
            <remarks>The Luminosity is clamped to [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Color.WithSaturation(System.Double)">
            <param name="saturation">The modified Saturation.</param>
            <summary>Returns a color with modified Saturation, but keeping the same Luminosity and Hue.</summary>
            <returns>A color.</returns>
            <remarks>The Saturation is clamped to [0,1]. This method is useful for creating color palettes.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Color.Yellow">
            <summary>The Yellow color.</summary>
            <remarks>Yellow is #ffff00.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ColorTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to a <see cref="T:Xamarin.Forms.Color" />.</summary>
            <remarks>
                <para>The following example shows some variations of <see cref="T:Xamarin.Forms.ColorTypeConverter" />:</para>
                <example>
                    <code lang="C#"><![CDATA[
var converter = new ColorTypeConverter ();
Assert.True (converter.CanConvertFrom (typeof(string)));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("Color.Blue"));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("Blue"));
Assert.AreEqual (Color.Blue, converter.ConvertFrom ("#0000ff"));
Assert.AreEqual (Color.Default, converter.ConvertFrom ("Color.Default"));
Assert.AreEqual (Color.Accent, converter.ConvertFrom ("Accent"));
var hotpink = Color.FromHex ("#FF69B4");
Color.Accent = hotpink;
Assert.AreEqual (Color.Accent, converter.ConvertFrom ("Accent"));          
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ColorTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ColorTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ColorTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ColumnDefinition">
            <summary>An <see cref="I:Xamarin.Forms.IDefinition" /> that defines properties for a column in a <see cref="T:Xamarin.Forms.Grid" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ColumnDefinition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ColumnDefinition.SizeChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ColumnDefinition.Width">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ColumnDefinition.WidthProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ColumnDefinitionCollection">
            <summary>A <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> for <see cref="T:Xamarin.Forms.ColumnDefinition" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ColumnDefinitionCollection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Command">
            <summary>Defines an <see cref="T:System.Windows.Input.ICommand" /> implementation wrapping an <see cref="System.Action" />.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example creates a new Command and set it to a button.
              <code lang="C#"><![CDATA[
var command = new Command (() =&gt; Debug.WriteLine ("Command executed"));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
};
]]></code></example>
                </para>
                <para>
                    <example language="C#">
              More useful scenarios takes a parameter
              <code lang="C#"><![CDATA[
var command = new Command (o =&gt; Debug.WriteLine ("Command executed: {0}", o));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
  CommandParameter = "button0",
};
]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action)">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action{System.Object})">
            <param name="execute">An Action&lt;object&gt; to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>The Action will be executed with a parameter.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action,System.Func{System.Boolean})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>Wehenever the value returned by canExecute has changed, a call to <see cref="M:Xamarin.QuickuI.Command.ChangeCanExecute" /> is required to trigger <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Command(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <param name="execute">An Action&lt;object&gt; to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;object,bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks>Wehenever the value returned by canExecute has changed, a call to <see cref="M:Xamarin.QuickuI.Command.ChangeCanExecute" /> is required to trigger <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Command.CanExecute(System.Object)">
            <param name="parameter">An <see cref="T:System.Object" /> used as parameter to determine if the Command can be executed.</param>
            <summary>Returns a <see cref="T:System.Boolean" /> indicating if the Command can be exectued with the given parameter.</summary>
            <returns>
                <see langword="true" /> if the Command can be executed, <see langword="false" /> otherwise.</returns>
            <remarks>
                <para>If no canExecute parameter was passed to the Command constructor, this method always returns <see langword="true" />.</para>
                <para>If the Command was created with non-generic execute parameter, the parameter of this method is ignored.</para>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.Command.CanExecuteChanged">
            <summary>Occurs when the target of the Command should reevaluate whether or not the Command can be executed.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Command.ChangeCanExecute">
            <summary>Send a <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /></summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Command.Execute(System.Object)">
            <param name="parameter">An <see cref="T:System.Object" /> used as parameter for the execute Action.</param>
            <summary>Invokes the execute Action</summary>
            <remarks>
                <para>If the Command was created with non-generic execute parameter, the parameter of this method is ignored.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.Command`1">
            <typeparam name="T">The Type of the parameter,</typeparam>
            <summary>Defines an <see cref="T:System.Windows.Input.ICommand" /> implementation wrapping a generic Action&lt;T&gt;.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example creates a new Command and set it to a button.
              <code lang="C#"><![CDATA[
var command = new Command&lt;string&gt; (s =&gt; Debug.WriteLine ("Command executed: {0}", s));
var button = new Button {
  Text = "Hit me to execute the command",
  Command = command,
  CommandParameter = "button0",
};
]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Command`1(`0System`0.`0Action`0{`0T`0})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Command`1(`0System`0.`0Action`0{`0T`0},`0System`0.`0Func`0{`0T`0,`0System`0.`0Boolean`0})">
            <param name="execute">An Action to execute when the Command is executed.</param>
            <param name="canExecute">A <see cref="T:System.Func&lt;T,bool&gt;" /> indicating if the Command can be executed.</param>
            <summary>Initializes a new instance of the Command class.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ConcurrentDictionary`2">
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TValue">To be added.</typeparam>
            <summary>An <see cref="T:System.Collections.Generic.IDictionary`2" /> that treats updates and deletes atomically and thus can be written to from multiple threads concurrently.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEnumerable`1``10`1{``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1}})">
            <param name="collection">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEqualityComparer`1``10`1{``10TKey`1``10`1})">
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEnumerable`1``10`1{``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1}},``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEqualityComparer`1``10`1{``10TKey`1``10`1})">
            <param name="collection">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Int32`1``10`1,``10System`1``10`1.``10Int32`1``10`1)">
            <param name="concurrencyLevel">To be added.</param>
            <param name="capacity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Int32`1``10`1,``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEnumerable`1``10`1{``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1}},``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEqualityComparer`1``10`1{``10TKey`1``10`1})">
            <param name="concurrencyLevel">To be added.</param>
            <param name="collection">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConcurrentDictionary`2(``10System`1``10`1.``10Int32`1``10`1,``10System`1``10`1.``10Int32`1``10`1,``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEqualityComparer`1``10`1{``10TKey`1``10`1})">
            <param name="concurrencyLevel">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.AddOrUpdate(``10TKey`1``10`1,``10System`1``10`1.``10Func`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1},``10System`1``10`1.``10Func`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1,``10TValue`1``10`1})">
            <param name="key">To be added.</param>
            <param name="addValueFactory">To be added.</param>
            <param name="updateValueFactory">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.AddOrUpdate(``10TKey`1``10`1,``10TValue`1``10`1,``10System`1``10`1.``10Func`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1,``10TValue`1``10`1})">
            <param name="key">To be added.</param>
            <param name="addValue">To be added.</param>
            <param name="updateValueFactory">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.ContainsKey(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.GetOrAdd(``10TKey`1``10`1,``10System`1``10`1.``10Func`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1})">
            <param name="key">To be added.</param>
            <param name="valueFactory">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.GetOrAdd(``10TKey`1``10`1,``10TValue`1``10`1)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.IsEmpty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.Item(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.Keys">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1})">
            <param name="pair">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1})">
            <param name="pair">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1}[],``10System`1``10`1.``10Int32`1``10`1)">
            <param name="array">To be added.</param>
            <param name="startIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10KeyValuePair`1``10`1{``10TKey`1``10`1,``10TValue`1``10`1})">
            <param name="pair">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(``10TKey`1``10`1,``10TValue`1``10`1)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(``10System`1``10`1.``10Array`1``10`1,``10System`1``10`1.``10Int32`1``10`1)">
            <param name="array">To be added.</param>
            <param name="startIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Add(``10System`1``10`1.``10Object`1``10`1,``10System`1``10`1.``10Object`1``10`1)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(``10System`1``10`1.``10Object`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Item(``10System`1``10`1.``10Object`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(``10System`1``10`1.``10Object`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.TryAdd(``10TKey`1``10`1,``10TValue`1``10`1)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.TryGetValue(``10TKey`1``10`1,``10TValue`1``10`1@)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.TryRemove(``10TKey`1``10`1,``10TValue`1``10`1@)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConcurrentDictionary`2.TryUpdate(``10TKey`1``10`1,``10TValue`1``10`1,``10TValue`1``10`1)">
            <param name="key">To be added.</param>
            <param name="newValue">To be added.</param>
            <param name="comparisonValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConcurrentDictionary`2.Values">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Constraint">
            <summary>A layout constraint used by <see cref="T:Xamarin.Forms.RelativeLayout" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.Constant(System.Double)">
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.FromExpression(System.Linq.Expressions.Expression{System.Func{System.Double}})">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.RelativeToParent(System.Func{Xamarin.Forms.RelativeLayout,System.Double})">
            <param name="measure">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Constraint.RelativeToView(Xamarin.Forms.View,System.Func{Xamarin.Forms.RelativeLayout,Xamarin.Forms.View,System.Double})">
            <param name="view">To be added.</param>
            <param name="measure">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ConstraintExpression">
            <summary>Defines a constraint relationship.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConstraintExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Constant">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.ElementName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Factor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Property">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintExpression.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ConstraintExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ConstraintType">
            <summary>Enumeration specifying whether a constraint is constant, relative to a view, or relative to its parent.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.Constant">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.RelativeToParent">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ConstraintType.RelativeToView">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.ConstraintTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to a <see cref="T:Xamarin.Forms.Constraint" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ConstraintTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ConstraintTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ContentPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that manages content.</summary>
            <remarks>This is a Page displaying a single View, often a container like a <see cref="T:Xamarin.Forms.StackLayout" /> or <see cref="T:Xamarin.Forms.ScrollView" /></remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentPage">
            <summary>Initializes a new ContentPage instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentPage.Content">
            <summary>Gets or Sets the View element representing the content of the Page.</summary>
            <value>A <see cref="T:Xamarin.Forms.View" /> subclass, or <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ContentPropertyAttribute">
            <summary>Indicates the property of the type that is the (default) content property.</summary>
            <remarks>
                <para>XAML processor uses to determine the content property.</para>
                <para>
                    <example lang="XAML">
Decorating types with ContentPropertyAttribute allows shorter XAML syntax. As <see cref="T:Xamarin.Forms.ContentView" /> has a ContentProperty attribute applied, this XAML is valid:
<code lang="C#"><![CDATA[
&lt;ContentView&gt;
  &lt;Label Text="Hello, Forms"\&gt;
&lt;/ContentView&gt;
  ]]></code>
This is equivalent to the following, more explicit XAML
<code lang="C#"><![CDATA[
&lt;ContentView&gt;
  &lt;ContentView.Content&gt;
    &lt;Label Text="Hello, Forms"\&gt;
  &lt;/ContentView.Content&gt;
&lt;/ContentView&gt;
  ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentPropertyAttribute(System.String)">
            <param name="name">The name of the property.</param>
            <summary>Initializes a new instance of the ContentPropertyAttribute class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentPropertyAttribute.Name">
            <summary>Gets the name of the content property</summary>
            <value>A string representing the name of the content property.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ContentView">
            <summary>An element with a single content.</summary>
            <remarks>
                <para>ContentView has very little use of it's own. It's purpose is to serve as a base class for user-defined compound views.</para>
                <para>
                    <example lang="C#">
          The following example shows how to construct a new ContentView with a Label inside.
          <code lang="C#"><![CDATA[
var layout = new ContentView {
  Content = new Label { Text = "I'm Content!" },
};
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ContentView">
            <summary>Initializes a new instance fo the ContentView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ContentView.Content">
            <summary>Gets or sets the content of the ContentView.</summary>
            <value>A <see cref="T:Xamarin.Forms.View" /> used as content.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ContentView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the y coordinate of the child region bounding box.</param>
            <param name="height">A value representing the y coordinate of the child region bounding box.</param>
            <summary>Positions and sizes the content of a ContentView.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ContentView.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the ContentView to use</param>
            <param name="heightConstraint">The available height for the ContentView to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of the ContentView.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the StackLayout.</returns>
            <remarks>The results of this method will be the desired size of its content.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DataTemplate">
            <summary>A template for multiple bindings, commonly used by <see cref="T:Xamarin.Forms.ListView" />s, <see cref="T:Xamarin.Forms.MultiPage" />s, and <see cref="T:Xamarin.Forms.TableView" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplate(System.Func{System.Object})">
            <param name="loadTemplate">A custom content generator to be called </param>
            <summary>Creates and initializes a new instance of the <see cref="T:Xamarin.Forms.DataTemplate" /> class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DataTemplate(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Bindings">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.CreateContent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.SetBinding(Xamarin.Forms.BindableProperty,Xamarin.Forms.BindingBase)">
            <param name="property">To be added.</param>
            <param name="binding">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DataTemplate.SetValue(Xamarin.Forms.BindableProperty,System.Object)">
            <param name="property">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Values">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DataTemplate.Xamarin#Forms#IElement#Parent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DateChangedEventArgs">
            <summary>Event arguments for <see cref="E:Xamarin.Forms.DatePicker.DateSelected" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DateChangedEventArgs(System.DateTime,System.DateTime)">
            <param name="oldDate">To be added.</param>
            <param name="newDate">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DateChangedEventArgs.NewDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DateChangedEventArgs.OldDate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DatePicker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that allows date picking.</summary>
            <remarks>The visual representation of a DatePicker is very similar to the one of <see cref="T:Xamarin.Forms.Entry" />, except that a special control for picking a date appears in place of a keyboard.
<para><example lang="C#">
    The following example shows declaration of a DatePicker with a default date set.
    <code lang="C#"><![CDATA[
new DatePicker () { Date = DateTime.Now };
    ]]></code></example></para></remarks>
        </member>
        <member name="C:Xamarin.Forms.DatePicker">
            <summary>Initializes a new instance of the DatePicker class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.Date">
            <summary>Gets or sets the displayed date. This is a bindable property.</summary>
            <value>The <see cref="T:System.DateTime" /> displayed in the DatePicker.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.DateProperty">
            <summary>Identifies the Date bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.DatePicker.DateSelected">
            <summary>An event fired when the Date property changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.Format">
            <summary>The format of the date to display to the user. This is a dependency property.</summary>
            <value>A valid date format.</value>
            <remarks>Format string is the same is passed to DateTime.ToString (string format).</remarks>
        </member>
        <member name="F:Xamarin.Forms.DatePicker.FormatProperty">
            <summary>Identifies the Format dependency property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.MaximumDate">
            <summary>The highest date selectable for this DatePicker. This is a bindable property.</summary>
            <value>The maximum <see cref="T:System.DateTime" /> selectable for the DateEntry. Default December 31, 2100.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.MaximumDateProperty">
            <summary>Identifies the MaximumDate bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.DatePicker.MinimumDate">
            <summary>The lowest date selectable for this DatePicker. This is a bindable property.</summary>
            <value>The minimum <see cref="T:System.DateTime" /> selectable for the DateEntry. Default January 1, 1900.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.DatePicker.MinimumDateProperty">
            <summary>Identifies the MinimumDate bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.DefinitionCollection`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>A collection parameterized by an <see cref="I:Xamarin.Forms.IDefinition" />. Base class for <see cref="T:Xamarin.Forms.ColumnDefinitionCollection" /> and <see cref="T:Xamarin.Forms.RowDefinitionCollection" />.</summary>
            <remarks>
                <para>Objects of type <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> are parameterized with a type of <see cref="I:Xamarin.Forms.IDefinition" />.</para>
                <para>
                    <img href="IDefinition.DefinitionCollectionRelation.png" />
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Add(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Contains(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.CopyTo(T[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.IndexOf(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Insert(System.Int32,T)">
            <param name="index">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.DefinitionCollection`1.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.DefinitionCollection`1.ItemSizeChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.Remove(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.RemoveAt(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DefinitionCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DependencyAttribute">
            <summary>An attribute that indicates that the specified type provides a concrete implementation of a needed interface.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.DependencyAttribute(System.Type)">
            <param name="implementorType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.DependencyFetchTarget">
            <summary>Enumeration specifying whether <see cref="M:Xamarin.Forms.DependencyService.Get" /> should return a reference to a global or new instance.</summary>
            <remarks>
                <para>The following example shows how <see cref="T:Xamarin.Forms.DependencyFetchTarget" /> can be used to specify a new instance:</para>
                <example>
                    <code lang="C#"><![CDATA[
var secondFetch = DependencyService.Get&lt;IDependencyTest&gt; (DependencyFetchTarget.NewInstance);
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.DependencyFetchTarget.GlobalInstance">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.DependencyFetchTarget.NewInstance">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.DependencyService">
            <summary>Static class that provides the <see cref="M:Xamarin.Forms.DependencyService.Get`1" /> factory method for retrieving platform-specific implementations of the specified type T.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.DependencyService.Get``1(Xamarin.Forms.DependencyFetchTarget)">
            <typeparam name="T">To be added.</typeparam>
            <param name="fetchTarget">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Device">
            <summary>An utility class to interract with the current Device/Platform.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.BeginInvokeOnMainThread(System.Action)">
            <param name="action">The Action to invoke </param>
            <summary>Invokes an Action on the device main (UI) thread.</summary>
            <remarks>
                <para>
                    <example lang="C#">This example show how to set the Text of Label on the main thread, e.g. in response to an async event.
          <code lang="C#"><![CDATA[
Device.BeginInvokeOnMainThread (() =&gt; {
  label.Text = "Async operation completed";
});
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Device.Idiom">
            <summary>Gets the kind of device Forms is currently working on.</summary>
            <value>A <see cref="T:Xamarin.Forms.TargetIdiom" /> representing the device type.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.OnPlatform(System.Action,System.Action,System.Action,System.Action)">
            <param name="iOS">(optional) The Action to execute on iOS.</param>
            <param name="Android">(optional) The Action to execute on Android.</param>
            <param name="WinPhone">(optional) The Action to execute on WinPhone.</param>
            <param name="Default">(optional) The Action to execute if no Action was provided for the current OS.</param>
            <summary>Executes different Actions depending on the <see cref="T:Xamarin.QcuikUI.TargetOS" /> Forms is working on.</summary>
            <remarks>
                <para>
                    <example lang="C#">This example show how to change the font of a Label on a single OS.
          <code lang="C#"><![CDATA[
Device.OnPlatform (iOS: () =&gt; label.Font = Font.OfSize ("HelveticaNeue-UltraLight", NamedSize.Large));
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.OnPlatform``1(``0,``0,``0)">
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <param name="iOS">The value for iOS.</param>
            <param name="Android">The value for Android.</param>
            <param name="WinPhone">The value for WinPhone.</param>
            <summary>Returns different values depending on the <see cref="T:Xamarin.QcuikUI.TargetOS" /> Forms is working on.</summary>
            <returns>The value for the current OS.</returns>
            <remarks>
                <para>
                    <example lang="C#">This example show how to use different heights for a Button on different OS.
          <code lang="C#"><![CDATA[
button.HeightRequest = Device.OnPlatform (20,30,30);
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Device.OpenUri(System.Uri)">
            <param name="uri">The <see cef="T:ystem.Uri" /> to open.</param>
            <summary>Request the device to open the Uri.</summary>
            <remarks>This often navigates out of the application.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Device.OS">
            <summary>Gets the <see cref="Xamarin.Forms.TargetPlatform" /> indicating the OS Forms is working on.</summary>
            <value>A <see cref="Xamarin.Forms.TargetPlatform" /> indicating the current OS.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})">
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="callback">The action to run when the timer elapses.</param>
            <summary>Starts a recurring timer using the device clock capabilities.</summary>
            <remarks>While the callback returns <see langword="true" /> the timer will keep recurring.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Easing">
            <summary>Functions that modify values non-linearly, generally used for animations.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Easing(System.Func{System.Double,System.Double})">
            <param name="easingFunc">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.BounceIn">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.BounceOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicIn">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicInOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.CubicOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Easing.Ease(System.Double)">
            <param name="v">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.Linear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Easing.op_Implicit(System.Func{System.Double,System.Double})~Xamarin.Forms.Easing">
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinIn">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinInOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SinOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SpringIn">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Easing.SpringOut">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Editor">
            <summary>A control that can edit multiple lines of text.</summary>
            <remarks>For single line entries, see <see cref="T:Xamarin.Forms.Entry" />.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Editor">
            <summary>Initializes a new instance of the Editor class.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example creates a Editor with a Chat keyboard that fills the available space.
              <code lang="C#"><![CDATA[
var editor = new Editor {
  VerticalOptions = LayoutOptions.FillAndExpand,
  Keyboard = Keyboard.Chat,
};
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Editor.Text">
            <summary>Gets or sets the text of the entry. This is a bindable property.</summary>
            <value>A string containing the text of the entry. The default value is null.</value>
            <remarks>Setting this property will cause the <see cref="E:Xamarin.Forms.Editor.TextChanged" /> event to be emitted.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Editor.TextChanged">
            <summary>Occurs when the text of the Editor changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Editor.TextProperty">
            <summary>Identifies the Test bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Element">
            <summary>Provides the base class for all Forms hierarchal elements. This class contains all the methods and properties required to represent an element in the Forms hierarchy.</summary>
            <remarks>
                <para>The following diagram shows the classes derived from <see cref="T:Xamarin.Forms.Element" />. </para>
                <para>
                    <img href="Element.Hierarchy.png" />
                </para>
                <para>The diagram shows some important categories:</para>
                <list type="table">
                    <listheader>
                        <term>Class</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.VisualElement" />
                        </term>
                        <description>A <see cref="T:Xamarin.Forms.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Cell" />
                        </term>
                        <description>Cells are elements meant to be added to <see cref="T:Xamarin.Forms.ListView" /> or <see cref="T:Xamarin.Forms.TableView" />.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Page" />
                        </term>
                        <description>A <see cref="T:Xamarin.Forms.VisualElement" /> that occupies most or all of the screen and contains a single child.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Xamarin.Forms.Layout" />
                        </term>
                        <description>
                            <see cref="T:Xamarin.Forms.Layout" /> have a single child of type <see cref="T:Xamarin.Forms.View" />, while subclasses of <see cref="T:Xamarin.Forms.Layout`1" /> have a collection of multiple children views, including other layouts.</description>
                    </item>
                    <item>
                        <term>
            Controls and specialized <see cref="T:Xamarin.Forms.View" />s
          </term>
                        <description>The lower part of the diagram shows the Xamarin.Forms classes for universally-available controls, such as <see cref="T:Xamarin.Forms.Button" />s and <see cref="T:Xamarin.Forms.TableView" />s.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Element">
            <summary>Protected constructor used to initialize a the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.ChildAdded">
            <summary>Occurs whenever a child element is added to the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.ChildRemoved">
            <summary>Occurs whenever a child element is removed from the element.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.ClassId">
            <summary>Gets or sets a value used to identify a collection of semantically similar elements.</summary>
            <value>A string that represents the collection the element belongs to.</value>
            <remarks>Use the class id property to collect together elements into semantically similar groups for identification in ui testing and in theme engines.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Element.ClassIdProperty">
            <summary>Identifies the ClassId bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.DescendantAdded">
            <summary>Occurs whenever a child element is added to the elements subtree.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Element.DescendantRemoved">
            <summary>Occurs whenever a child element is removed from the elements subtree.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Id">
            <summary>Gets a value that can be used to uniquely identify an element through the run of an application.</summary>
            <value>A Guid uniquely identifying the element.</value>
            <remarks>This value is generated at runtime and is not stable across runs of your app.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnBindingContextChanged">
            <summary>Invoked whenever the binding context of the element changes. Implement this method to add class handling for this event.</summary>
            <remarks>Implementors must call the base method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">The element that was added.</param>
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildAdded" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element)">
            <param name="child">The element that was removed.</param>
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildRemoved" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.OnParentSet">
            <summary>Invoked whenever the Parent of an element is set. Implement this method in order to add behavior when the element is added to a parent.</summary>
            <remarks>Implementors must call the base method.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.Parent">
            <summary>Gets or sets the parent element of the element.</summary>
            <value>The element which should be the parent of this element.</value>
            <remarks>Most application authors will not need to set the parent element by hand.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.ParentView">
            <summary>Gets the element which is the closest ancestor of this element that is a <see cref="T:Xamarin.Forms.VisualElement" />.</summary>
            <value>The closest ansestor which is a <see cref="T:Xamarin.Forms.VisualElement" />.</value>
            <remarks>Convenient way of accessing the nearest ancestor of an element which is actually represented on screen visually. If this element is a visual element, its bounds are relative to its ParentView.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Element.StyleId">
            <summary>Gets or sets a user defined value to uniquely identify the element.</summary>
            <value>A string uniquely identifying the element.</value>
            <remarks>Use the StyleId property to identify individual elements in your application for identification in ui testing and in theme engines.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#FindByName(System.String)">
            <param name="name">The identifier of the <see cref="T:Xamarin.Forms.Element" /> being sought.</param>
            <summary>Finds an object previously registered with <see cref="M:Xamarin.Forms.Element.RegisterName" />.</summary>
            <returns>The Object previously associated with <paramref name="name" /> by a call to <see cref="M:Xamarin.Forms.Element.RegisterName" />. Raises a <see cref="T:System.InvalidOperationException" /> if <c>this</c> is not in an <see cref="T:Xamarin.Forms.INameScope" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#RegisterName(System.String,System.Object)">
            <param name="name">Identifier to be used with the <paramref name="scopedElement" />.</param>
            <param name="scopedElement">Object to be associated with the <paramref name="name" />.</param>
            <summary>Within an <see cref="T:Xamarin.Forms.INameScope" />, creates an association between <paramref name="name" /> and <paramref name="scopedElement" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Element.Xamarin#Forms#INameScope#UnregisterName(System.String)">
            <param name="name">The identifier to be removed.</param>
            <summary>Removes <paramref name="name" /> from an <see cref="T:Xamarin.Forms.INameScope" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ElementEventArgs">
            <summary>Provides data for events pertaining to a single <see cref="T:Xamarin.Forms.Element" />.</summary>
            <remarks />
            <altmember cref="E:Xamarin.Forms.Element.ChildAdded" />
            <altmember cref="E:Xamarin.Forms.Element.ChildRemoved" />
            <altmember cref="E:Xamarin.Forms.Element.DescendantAdded" />
            <altmember cref="E:Xamarin.Forms.Element.DescendantRemoved" />
        </member>
        <member name="C:Xamarin.Forms.ElementEventArgs(Xamarin.Forms.Element)">
            <param name="element">The element relevant to the event.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ElementEventArgs" /> class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ElementEventArgs.Element">
            <summary>Gets the element relevant to the event.</summary>
            <value>The element relevant to the event.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Entry">
            <summary>A control that can edit a single line of text.</summary>
            <remarks>Entry is a single line text entry. It is best used for collecting small discrete pieces of information, like usernames and passwords.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Entry">
            <summary>Initializes a new instance of the Entry class.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example creates a new username and password set of entries.
              <code lang="C#"><![CDATA[
  View CreateLoginForm ()
  {
    var usernameEntry = new Entry {Placeholder = "Username"};
    var passwordEntry = new Entry {
      Placeholder = "Password",
      IsPassword = true
    };

    return new StackLayout {
      Children = {
        usernameEntry,
        passwordEntry
      }
    };
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.Entry.Completed">
            <summary>Occurs when the user finalizes the text in an entry with the return key.</summary>
            <remarks>This finilaization will usually but not always be accompanied by IsFocused being set to false.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.IsPassword">
            <summary>Gets or sets a value that indicates if the entry should visually obscure typed text. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is a password box; otherwise, <see langword="false" />. Default value is <see langword="false" />.</value>
            <remarks>Toggling this value does not reset the contents of the entry, therefore it is advisable to be careful about setting IsPassword to false, as it may contain sensitive information.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Entry.IsPasswordProperty">
            <summary>Identifies the IsPassword bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Entry.Placeholder">
            <summary>Gets or sets the placeholder text shown when the entry <see cref="P:Xamarin.Forms.Entry.Text" /> is null or empty. This is a bindable property.</summary>
            <value>The placeholder text shown when <see cref="P:Xamarin.Forms.Entry.Text" /> is null or empty. The default value is <see langword="null" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Entry.PlaceholderProperty">
            <summary>Identifies the Placeholder bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Entry.Text">
            <summary>Gets or sets the text of the entry. This is a bindable property.</summary>
            <value>A string containing the text of the entry. The default value is <see langword="null" />.</value>
            <remarks>Setting this property will cause the <see cref="E:Xamarin.Forms.Entry.ValueChanged" /> event to be emitted.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Entry.TextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Entry.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of the Entry. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> of the text.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Entry.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Entry.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.EntryCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> with a label and a single line text entry field.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.EntryCell">
            <summary>Initializes a new instance of the EntryCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Keyboard">
            <summary>Gets or sets the Keyboard to display while editing the EntryCell. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Keyboard" /> representing the keyboard kind. Default is <see cref="P:Xamarin.Forms.Keyboard.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.KeyboardProperty">
            <summary>Identifies the Keyboard bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Label">
            <summary>Gets or sets the fixed text presented nes to the Entry in the EntryCell. This is a bindable property.</summary>
            <value>A <see cref="T:System.String" />.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.LabelColor">
            <summary>Gets or sets the Color used for rendering the Label property. This is a bindable property.</summary>
            <value>Default is Color.Default.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.LabelColorProperty">
            <summary>Identifies the LabelColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.LabelProperty">
            <summary>Identifies the Label bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Placeholder">
            <summary>Gets or sets the placeholder text displayed in the Entry when the Text is null or empty. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.PlaceholderProperty">
            <summary>Identifies the Placeholder bindable property,</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.Text">
            <summary>Gets or sets the content of the Entry of the EntryCell. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.EntryCell.XAlign">
            <summary>Gets or sets the horizontal alignement of the Text property. This is a bindable property.</summary>
            <value>Default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.EntryCell.XAlignProperty">
            <summary>Identifies the XAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.FileImageSource">
            <summary>An <see cref="T:Xamarin.Forms.ImageSource" /> that reads an image from a file.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.FileImageSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.Cancel">
            <summary>Request a cancel of the ImageSource loading.</summary>
            <returns>An awaitable Task.</returns>
            <remarks>Overriden for FileImageSource. FileImageSource are not cancellable, so this will always returns a completed Task with <see langword="false" /> as Result.</remarks>
        </member>
        <member name="P:Xamarin.Forms.FileImageSource.File">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.FileImageSource.FileProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FileImageSource.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.FocusEventArgs">
            <summary>Event args for <see cref="T:Xamarin.Forms.VisualElement" />'s <see cref="E:Xamarin.Forms.VisualElement.Focused" /> and <see cref="T:Xamarin.Forms.VisualElement.Unfocused" /> events.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.FocusEventArgs(Xamarin.Forms.VisualElement,System.Boolean)">
            <param name="visualElement">The <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</param>
            <param name="isFocused">Whether or not the <paramref name="visualElement" /> was focused.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.FocusEventArgs" /> class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.FocusEventArgs.IsFocused">
            <summary>Gets whether or not the <see cref="P:Xamarin.Forms.FocusEventArgs.View" /> was focused.</summary>
            <value>
                <see langword="true" /> if the view was focused, <see langword="false" /> otherwise.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.FocusEventArgs.VisualElement">
            <summary>Gets the <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</summary>
            <value>The <see cref="T:Xamarin.Foms.VisualElement" /> who's focused was changed.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Font">
            <summary>The font used to display text.</summary>
            <remarks>The available fonts, and the matching between <see cref="T:Xamarin.Forms.Font" /> and real displayed fonts is device-dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.BoldSystemFontOfSize(System.Double)">
            <param name="size">The desired font size.</param>
            <summary>Returns an usable font instance representing the default bold font, in the requested size, for the device.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.BoldSystemFontOfSize(Xamarin.Forms.NamedSize)">
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable font instance representing the default bold font, in the requested NamedSize, for the device.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> value to compare this font to.</param>
            <summary>Determine if the provided <see cref="T:System.Object" /> is equivalent to the current Font.</summary>
            <returns>
                <see langword="true" /> if the provided object is an equivalent font. <see langword="false" /> otherwise.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.GetHashCode">
            <summary>Get the Hashcode for this <see cref="T:System.Object" />.</summary>
            <returns>A signed 32-bit hash code.</returns>
            <remarks>Overriden.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.OfSize(System.String,System.Double)">
            <param name="name">The name of the targetted system font.</param>
            <param name="size">The desired font size.</param>
            <summary>Returns an usable <see cref="T:Xamarin.Forms.Font" />, with the requested font and size.</summary>
            <returns>A Font instance.</returns>
            <remarks>Font availability is platform and device dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.OfSize(System.String,Xamarin.Forms.NamedSize)">
            <param name="name">The name of the targetted system font..</param>
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable <see cref="T:Xamarin.Forms.Font" />, with the requested font and NamedSize.</summary>
            <returns>A Font instance.</returns>
            <remarks>Font availability is platform and device dependent.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.op_Equality(Xamarin.Forms.Font,Xamarin.Forms.Font)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.op_Inequality(Xamarin.Forms.Font,Xamarin.Forms.Font)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(System.Double)">
            <param name="size">The desired font size.</param>
            <summary>Returns an usable font instance representing the default font, in the requested size, for the device and platform.</summary>
            <returns>The requested <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Font.SystemFontOfSize(Xamarin.Forms.NamedSize)">
            <param name="size">The desired font <see cref="T:Xamarin.Forms.NamedSize" />.</param>
            <summary>Returns an usable font instance representing the default font, in the requested size, for the device and platform.</summary>
            <returns>The requested bold <see cref="T:Xamarin.Forms.Font" />.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.FontTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to <see cref="T:Xamarin.Forms.Core.Font" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.FontTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.FontTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Frame">
            <summary>An element containing a single child, with some framing options.</summary>
            <remarks>
                <para>Frame have a default <see cref="P:Xamarin.Forms.Layout.Padding" /> of 20.</para>
                <para>
                    <example lang="C#">
          The following example shows how to construct a new Frame with an Outline color.
          <code lang="C#"><![CDATA[
var frame = new Frame {
  Content = new Label { Text = "I'm Framous!" },
  OutlineColor = Color.Silver,
};
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Frame">
            <summary>Initializes a new instance of the Frame class.</summary>
            <remarks>A Frame has a default <see cref="P:Xamarin.Forms.Layout.Padding" /> of 20.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Frame.HasShadow">
            <summary>Gets or sets a flag indicating if the Frame has a shadow displayed. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating whether or not the Frame has a shadow. Default is <see langword="true" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Frame.HasShadowProperty">
            <summary>Identifies the HasShadow bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Frame.OutlineColor">
            <summary>Gets or sets the color of the border of the Frame. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Color" /> representing the border Color. Default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Frame.OutlineColorProperty">
            <summary>Identifies the OutlineColor bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.GestureRecognizer">
            <summary>The base class for all gesture recognizers.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GestureRecognizer.Parent">
            <summary>The parent element of the gesture recognizer.</summary>
            <value>An element from which the binding context will be inherited.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.GestureState">
            <summary>Enumeration specifying the various states of a gesture.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Began">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Cancelled">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Ended">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Failed">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Possible">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.GestureState.Update">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.Grid">
            <summary>A layout containing views arranged in rows and columns.</summary>
            <remarks>
                <para>
                    <img href="IDefinition.DefinitionCollectionRelation.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Grid">
            <summary>Initializes a new instance of the Grid class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Grid.Children">
            <summary>Gets the collection of child elements of the Grid.</summary>
            <value>The collection of child elements. The default is an empty collection.</value>
            <remarks>
                <para>You can use implicit collection syntax in XAML to add items.</para>
                <para>This property is the ContentPropertyAttribute for the Grid class. It doesn't need to be explicitly declared.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.ColumnDefinitions">
            <summary>Gets or sets the ColumnDefinitonCollection for the Grid. This is a bindable property.</summary>
            <value>A ColumnDefinitionCollection for the Grid instance.</value>
            <remarks>The ColumnDefinitionCollection is a ordered set of ColumnDefinition objects. Adding ColumnDefinition objects allows controlling the rendering of the Grid. If no ColumnDefinition objects are present in the ColumnDefinitionCollection, the Grid act like if it had any ColumnDefinition with a Width set to Auto to draw all the Children.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnDefinitionsProperty">
            <summary>Identifies the ColumnDefinitions bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnProperty">
            <summary>Identifies the ColumnDefinition attached bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Grid.ColumnSpacing">
            <summary>Gets or sets the distance between columns in the Grid. This is a bindable property.</summary>
            <value>The space between columns</value>
            <remarks>The Grid does not include spacing before the first column, or after the last one.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnSpacingProperty">
            <summary>Identifies the ColumnSpacing bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.ColumnSpanProperty">
            <summary>Identifies the ColumnSpan attached bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.GetColumn(Xamarin.Forms.BindableObject)">
            <param name="bindable">The BindableObject (usually a View subclass) from which to read the property value.</param>
            <summary>Gets the value of the Grid.Column attached bindable property from the specified BindableObject.</summary>
            <returns>The value of the Grid.Column attached bindable property.</returns>
            <remarks>Call GetColumn to determine in which column an element belongs.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetColumnSpan(Xamarin.Forms.BindableObject)">
            <param name="bindable">The BindableObject (usually a View subclass) from which to read the property value.</param>
            <summary>Gets the value of the Grid.ColumnSpan attached bindable property from the specified BindableObject.</summary>
            <returns>The value of the Grid.ColumnSpan attached bindable property.</returns>
            <remarks>Call GetColumnSpan to determine on how many columns the element spans.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetRow(Xamarin.Forms.BindableObject)">
            <param name="bindable">The BindableObject (usually a View subclass) from which to read the property value.</param>
            <summary>Gets the value of the Grid.Row attached bindable property from the specified BindableObject.</summary>
            <returns>The value of the Grid.Row attached bindable property.</returns>
            <remarks>Call GetRow to determine in which row an element belongs.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.GetRowSpan(Xamarin.Forms.BindableObject)">
            <param name="bindable">The BindableObject (usually a View subclass) from which to read the property value.</param>
            <summary>Gets the value of the Grid.RowSpan attached bindable property from the specified BindableObject.</summary>
            <returns>The value of the Grid.RowSpan attached bindable property.</returns>
            <remarks>Call GetRowSpan to determine on how many rows the element spans.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.InvalidateMeasure">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnAdded(Xamarin.Forms.View)">
            <param name="view">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnRemoved(Xamarin.Forms.View)">
            <param name="view">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Grid.RowDefinitions">
            <summary>Gets or sets the RowDefinitionCollection for the Grid. This is a bindable property.</summary>
            <value>A RowDefinitionCollection for the Grid instance.</value>
            <remarks>The RowDefinitionCollection is a ordered set of RowDefinition objects. Adding RowDefinition objects allows controlling the rendering of the Grid. If no RowDefinition objects are present in the RowDefinitionCollection for a child object, the Grid act like if it had any RowDefinition with an Height set to Auto to draw all the Children.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowDefinitionsProperty">
            <summary>Identifies the RowDefinitions bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowProperty">
            <summary>Identifies the ColumnDefinition attached bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Grid.RowSpacing">
            <summary>Gets or sets the distance between rows in the Grid. This is a bindable property.</summary>
            <value>The space between rows</value>
            <remarks>The Grid does not include spacing before the first row, or after the last one.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Grid.RowSpacingProperty">
            <summary>Identifies the RowSpacing bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Grid.RowSpanProperty">
            <summary>Identifies the RowSpan attached bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.SetColumn(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">The BindableObject (usually a View subclass) on which to set the Grid.Column attached bindable property.</param>
            <param name="value">The property value to set.</param>
            <summary>Sets the value of the Grid.Column attached bindable property to the specified BindableObject.</summary>
            <remarks>Call SetColumn to set the the destination column of a Grid element.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetColumnSpan(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">The BindableObject (usually a View subclass) on which to set the Grid.ColumnSpan attached bindable property.</param>
            <param name="value">The property value to set.</param>
            <summary>Sets the value of the Grid.ColumnSpan attached bindable property to the specified BindableObject.</summary>
            <remarks>Call SetClumnSpan to set the span of an element.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetRow(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">The BindableObject (usually a View subclass) on which to set the Grid.Row attached bindable property.</param>
            <param name="value">The property value to set.</param>
            <summary>Sets the value of the Grid.Row attached bindable property to the specified BindableObject.</summary>
            <remarks>Call SetColumn to set the the destination row of a Grid element.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.SetRowSpan(Xamarin.Forms.BindableObject,System.Int32)">
            <param name="bindable">The BindableObject (usually a View subclass) on which to set the Grid.RowSpan attached bindable property.</param>
            <param name="value">The property value to set.</param>
            <summary>Sets the value of the Grid.RowSpan attached bindable property to the specified BindableObject.</summary>
            <remarks>Call SetRowSpan to set the span of an element.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Grid.IGridList`1">
            <typeparam name="T">The type of elements in the grid.</typeparam>
            <summary>List interface with overloads for adding elements to a grid.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.Add(`0,System.Int32,System.Int32)">
            <param name="view">The view to add.</param>
            <param name="left">The column to add the view to.</param>
            <param name="top">The row to add the view to.</param>
            <summary>Adds a view to the List at the specified location with a RowSpan and HeightSpan of 1.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.Add(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="view">The view to add.</param>
            <param name="left">The left edge of the column span. Must be greater than 0.</param>
            <param name="right">The right edge of the column span. Must be greater than left.</param>
            <param name="top">The top edge of the row span. Must be greater than 0.</param>
            <param name="bottom">The bottom edge of the row span. Must be greater than top.</param>
            <summary>Adds a view to the List at the specified row and column spans.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddHorizontal(System.Collections.Generic.IEnumerable{`0})">
            <param name="views">The views to add.</param>
            <summary>Add a collection views to the List such that they are horizontally stacked to the right of the current contents of the Grid.</summary>
            <remarks>The final span of each view is defined to be the height of the grid at the add time, and one column wide at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddHorizontal(`0)">
            <param name="view">The view to add.</param>
            <summary>Add a view to the List such that it is horizontally stacked to the right of the current contents of the Grid.</summary>
            <remarks>The final span of the view is defined to be the height of the grid at the add time, and one column wide at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddVertical(System.Collections.Generic.IEnumerable{`0})">
            <param name="views">The views to add.</param>
            <summary>Add a collection views to the List such that they are vertically stacked below the current contents of the Grid.</summary>
            <remarks>The final span of each view is defined to be the width of the grid at the add time, and one row tall at the end of the current arrangement.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Grid.IGridList`1.AddVertical(`0)">
            <param name="view">The view to add.</param>
            <summary>Add a view to the List such that it is vertically stacked below the current contents of the Grid.</summary>
            <remarks>The final span of the view is defined to be the width of the grid at the add time, and one row tall at the end of the current arrangement.</remarks>
        </member>
        <member name="T:Xamarin.Forms.GridLength">
            <summary>Used to define the size (width/height) of Grid ColumnDefinition and RowDefinition.</summary>
            <remarks>
                <para>GridLength of type GridUnitType.Absolute represents exact size. The ones of type GridUnitType.Auto adapts for fitting the size of the elements in the gird column/row. GridLenght of type GridUnitType.Star are used to split the available size in proportional buckets.</para>
                <para>This valuetype is readonly.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLength(System.Double)">
            <param name="value">To be added.</param>
            <summary>Initializes a new Absolute GridLength.</summary>
            <remarks>This is striclty equivalent to new GridLength (value, GridUnitType.Absolute).</remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLength(System.Double,Xamarin.Forms.GridUnitType)">
            <param name="value">The size of the GridLength.</param>
            <param name="type">The GridUnitType (Auto, Star, Absolute) of the GridLength.</param>
            <summary>Initializes a new GridLength.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.Auto">
            <summary>A ready to reuse GridLength of GridUnitType.Auto.</summary>
            <value />
            <remarks>Value has no meaning for GridLength ot type GridUnitType.Auto.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLength.Equals(System.Object)">
            <param name="obj">A GridLength to compare to.</param>
            <summary>Test the equality of this GridLength and another one.</summary>
            <returns>true is the GridLength are equal. False otherwise.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.GridLength.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>overriden.</remarks>
        </member>
        <member name="P:Xamarin.Forms.GridLength.GridUnitType">
            <summary>Gets or sets the GridUnitType of the GridLength</summary>
            <value>The GridUnitType of the GridLength</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsAbsolute">
            <summary>Gets wether or not the GridUnitType of the GridLength is GridUnitType.Absolute.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Absolute</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsAuto">
            <summary>Gets wether or not the GridUnitType of the GridLength is GridUnitType.Auto.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Auto</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.IsStar">
            <summary>Gets wether or not the GridUnitType of the GridLength is GridUnitType.Star.</summary>
            <value>true if the GridUnitType of the GridLength is GridUnitType.Star</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.GridLength.op_Implicit(System.Double)~Xamarin.Forms.GridLength">
            <param name="absoluteValue">The absolute size</param>
            <summary>Casting operator to convert a double into a GridLength of type GridUnitType.Absolute</summary>
            <returns>A GridLength of type GridUnitType.Absolute and of size absolutesize</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.GridLength.Value">
            <summary>Gets the Value of the GridLength.</summary>
            <value>The value in GridUnitType of the GridLength.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.GridLengthTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from strings to <see cref="T:Xamarin.Forms.GridLength" />s.</summary>
            <remarks>
                <para>The following example shows some uses of <see cref="T:Xamarin.Forms.GridLengthTypeConverter" />:</para>
                <example>
                    <code lang="C#"><![CDATA[
			var converter = new GridLengthTypeConverter ();

			Assert.AreEqual (new GridLength (42), converter.ConvertFrom ("42"));
			Assert.AreEqual (new GridLength (42.2), converter.ConvertFrom ("42.2"));
			Assert.AreEqual (GridLength.Auto, converter.ConvertFrom ("auto"));
			Assert.AreEqual (GridLength.Auto, converter.ConvertFrom (" AuTo "));
			Assert.AreEqual (new GridLength (1, GridUnitType.Star), converter.ConvertFrom ("*"));
			Assert.AreEqual (new GridLength (42, GridUnitType.Star), converter.ConvertFrom ("42*"));
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.GridLengthTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLengthTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.GridLengthTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.GridUnitType">
            <summary>The unit type of a GridLength.</summary>
            <remarks>See GridLength for discussion about the various GridUnitType values.</remarks>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Absolute">
            <summary>This is the unit type used for GridLength having absolute values set.</summary>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Auto">
            <summary>A GridLength with a GridUnitType.Auto adjust to the children sizes in the row/column.</summary>
        </member>
        <member name="F:Xamarin.Forms.GridUnitType.Star">
            <summary>GridUnitType.Auto is used to split the remaining space in proportional buckets.</summary>
        </member>
        <member name="T:Xamarin.Forms.HandlerAttribute">
            <summary>An abstract attribute whose subclasses specify the platform-specific renderers for Xamarin.Forms abstract controls.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.HandlerAttribute(System.Type,System.Type)">
            <param name="handler">To be added.</param>
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.HandlerAttribute.ShouldRegister">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.HtmlWebViewSource">
            <summary>A WebViewSource bound to an HTML-formatted string.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.HtmlWebViewSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.HtmlWebViewSource.BaseUrl">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.HtmlWebViewSource.BaseUrlProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.HtmlWebViewSource.Html">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.HtmlWebViewSource.HtmlProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IAnimatable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAnimatable.BatchBegin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IAnimatable.BatchCommit">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IDefinition">
            <summary>Interface defining the type of <see cref="T:Xamarin.Forms.RowDefinition" /> and <see cref="T:Xamarin.Forms.ColumnDefinition" />.</summary>
            <remarks>
                <para>Objects of type <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> are parameterized with a type of <see cref="I:Xamarin.Forms.IDefinition" />.</para>
                <para>
                    <img href="IDefinition.DefinitionCollectionRelation.png" />
                </para>
            </remarks>
        </member>
        <member name="E:Xamarin.Forms.IDefinition.SizeChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IGestureRecognizer">
            <summary>The base interface all gesture recognizers must implement.</summary>
            <remarks>This interface is currently empty, this will likely change.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ILayout">
            <summary>Interface indicating layout behavior and exposing the <see cref="E:Xamarin.Forms.ILayout.LayoutChanged" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ILayout.LayoutChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Image">
            <summary>
                <see cref="T:Xamarin.Forms.View" /> that holds an image.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Image">
            <summary>Initializes a new instance of the Image class.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example creates a new image from a file
              <code lang="C#"><![CDATA[
  var image = new Image { Source = "picture.png" };]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.Aspect">
            <summary>Gets or sets the scaling mode for the image. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Aspect" /> representing the scaling mode of the image. Default is <see cref="E:Xamarin.Forms.Aspect.AspectFit" />.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Image.AspectProperty">
            <summary>Identifies the Aspect bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Image.IsLoading">
            <summary>Gets the loading status of the image. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating if the image is loadin. Default is false.</value>
            <remarks>
                <para>
                    <example language="C#">
              The following example illustrates running a <see cref="T:Xamarin.Forms.ActivityIndicator" /> to indicate that the image is loading:
              <code lang="C#"><![CDATA[
var image = new Image { 
  Source = new ImageLoader {
    Uri = new Uri ("http://eoimages.gsfc.nasa.gov/images/imagerecords/57000/57723/globe_west_2048.jpg"),
    CachingEnabled = false,
  },
  WidthRequest = 200,
  HeightRequest = 200,
};

var indicator = new ActivityIndicator {Color = new Color (.5),};
indicator.SetBinding (ActivityIndicator.IsRunningProperty, "IsLoading");
indicator.BindingContext = image;]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Image.IsLoadingProperty">
            <summary>Identifies the IsLoading bindable property.</summary>
            <remarks>This bindable property is readonly.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.IsOpaque">
            <summary>Gets or sets the opacity flag for the image. This is a bindable property.</summary>
            <value>A <see cref="T:System.Boolean" /> indicating the value for the property. Default is false.</value>
            <remarks>If true, you'll be able to see through transparent parts of the image.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Image.IsOpaqueProperty">
            <summary>Identifies the IsOpaque bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Image.OnBindingContextChanged">
            <summary>Invoked when the BindingContext changes.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnPropertyChanged(System.String)">
            <param name="propertyName">The name of the property.</param>
            <summary>Invoked when a property has changed.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnPropertyChanging(System.String)">
            <param name="propertyName">The name of the property.</param>
            <summary>Invoked when a property will change.</summary>
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Image.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width.</param>
            <param name="heightConstraint">The available height.</param>
            <summary>Invoked when the layotu cycle request the element desired size.</summary>
            <returns />
            <remarks>Overriden for Image.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Image.Source">
            <summary>Gets or sets the source of the image. This is a bindable property.</summary>
            <value>An <see cref="T:Xamarin.Forms.ImageSource" /> representing the image source. Default is null.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Image.SourceProperty">
            <summary>Identifies the Source bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ImageCell">
            <summary>A <see cref="T:Xamarin.Forms.TextCell" /> that has an image.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ImageCell">
            <summary>Initializes a new instance of the ImageCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ImageCell.ImageSource">
            <summary>Gets or sets the ImageSource from which the Image is loaded. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ImageCell.ImageSourceProperty">
            <summary>Identifies the ImageSource bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ImageSource">
            <summary>Abstract class whose implementors load images from files or the Web.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.Cancel">
            <summary>Request a cancel of the ImageSource loading.</summary>
            <returns>An awaitable Task. The result of the Task indicates if the Task was successfully cancelled.</returns>
            <remarks>Calling Cancel() multiple times will throw an exception.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ImageSource.CancellationTokenSource">
            <summary>Gets the CancellationTokenSource.</summary>
            <value />
            <remarks>Used by inheritors to implement cancellable loads.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromFile(System.String)">
            <param name="file">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromResource(System.String)">
            <param name="resource">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromStream(System.Func{System.IO.Stream})">
            <param name="stream">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.FromUri(System.Uri)">
            <param name="uri">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnLoadingCompleted(System.Boolean)">
            <param name="cancelled">A bool indicating if the source was cancelled.</param>
            <summary>Called by inheritors to indicates the end of the loading of the source.</summary>
            <remarks>OnLoadingCompleted should follow a OnLoadingStarted.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnLoadingStarted">
            <summary>Called by inheritors to indicates the beginning of a loading operation.</summary>
            <remarks>OnLoadingCompleted should follow a OnLoadingStarted.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.OnSourceChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.op_Implicit(System.String)~Xamarin.Forms.ImageSource">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ImageSource.op_Implicit(System.Uri)~Xamarin.Forms.ImageSource">
            <param name="uri">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ImageSource.Xamarin#Forms#IElement#Parent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.INavigation">
            <summary>Interface abstracting platform-specific navigation.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopAsync">
            <summary>Asynchronously removes the top <see cref="T:Xamarin.Forms.Page" /> from the navigation stack.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Page" /> that had been at the top of the navigation stack.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopModalAsync">
            <summary>Asynchronously dismiss a <see cref="T:Xamarin.Forms.Page" /> presented as modal.</summary>
            <returns>An awaitable Task&lt;Page&gt;, indicating the PopModalAsync completion. The Task.Result is the Page that has been popped.</returns>
            <remarks>
                <para>The following example shows PushModal and PopModal usage:</para>
                <example>
                    <code lang="C#"><![CDATA[
var modalPage = new ContentPage ();
await Navigation.PushModalAsync (modalPage);
Debug.WriteLine ("The modal page is now on screen");
var poppedPage = await Navigation.PopModalAsync ();
Debug.WriteLine ("The modal page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (modalPage, poppedPage)); //prints "true"
        ]]></code>
                </example>
                <block subset="none" type="note">
                    <para>Application developers must <see langword="await" /> the result of <see cref="M:Xamarin.Forms.INavigation.PushModal" /> and <see cref="M:Xamarin.Forms.INavigation.PopModal" />. Calling <see cref="M:System.Threading.Tasks.Task.Wait" /> may cause a deadlock if a previous call to <see cref="M:Xamarin.Forms.INavigation.PushModal" /> or <see cref="M:Xamarin.Forms.INavigation.PopModal" /> has not completed.</para>
                </block>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PopToRootAsync">
            <summary>Pops all but the root <see cref="T:Xamarin.Forms.Page" /> off the navigation stack.</summary>
            <returns>A task representing the asynchronous dismiss operation.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to be pushed on top of the navigation stack.</param>
            <summary>Asynchronously adds a <see cref="T:Xamarin.Forms.Page" /> to the top of the navigation stack.</summary>
            <returns>A task representing the asynchronous dismiss operation.</returns>
            <remarks>
                <para>
						The following example shows <see cref="M:Xamarin.Forms.INavigation.Push" /> and <see cref="M:Xamarin.Forms.INavigation.Pop" /> usage:
					</para>
                <example>
                    <code lang="C#"><![CDATA[
var newPage = new ContentPage ();
await Navigation.PushAsync (newPage);
Debug.WriteLine ("the new page is now showing");
var poppedPage = await Navigation.PopAsync ();
Debug.WriteLine ("the new page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (newPage, poppedPage)); //prints "true"
							]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.INavigation.PushModalAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to present modally.</param>
            <summary>Presents a <see cref="T:Xamarin.Forms.Page" /> modally.</summary>
            <returns>An awaitable Task, indicating the PushModal completion.</returns>
            <remarks>
                <para>The following example shows PushModalAsync and PopModalAsync usage:</para>
                <example language="C#">
                    <code lang="C#"><![CDATA[
var modalPage = new ContentPage ();
await Navigation.PushModalAsync (modalPage);
Debug.WriteLine ("The modal page is now on screen");
var poppedPage = await Navigation.PopModalAsync ();
Debug.WriteLine ("The modal page is dismissed");
Debug.WriteLine (Object.ReferenceEquals (modalPage, poppedPage)); //prints "true"
        ]]></code>
                </example>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.InputView">
            <summary>The base class of a view which can take keyboard input.</summary>
            <remarks>The constructor of this class is internal. Forms does not provide any renderer for InputView base class.</remarks>
        </member>
        <member name="P:Xamarin.Forms.InputView.Keyboard">
            <summary>Gets or sets the Keyboard for the InputView. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Keyboard" /> to use for the InputView.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.InputView.KeyboardProperty">
            <summary>Identifies the Keyboard bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.IPageContainer`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Interface defining a container for <see cref="T:Xamarin.Forms.Page" />s and exposing a <see cref="P:Xamarin.Forms.IPageContainer`1.CurrentPage" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPageContainer`1.CurrentPage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IPlatform">
            <summary>Interface defining the abstraction of a native platform.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.BindingContext">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.IPlatform.BindingContextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.Engine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatform.Page">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IPlatform.SetPage(Xamarin.Forms.Page)">
            <param name="newRoot">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IPlatformEngine">
            <summary>Interface defining a native platform rendering engine.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IPlatformEngine.GetNativeSize(Xamarin.Forms.VisualElement,System.Double,System.Double)">
            <param name="view">To be added.</param>
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.IPlatformEngine.Supports3D">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IRegisterable">
            <summary>Internally-used flagging interface indicating types that can be registered with <see cref="T:Xamarin.Forms.Registrar" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemsView`1">
            <typeparam name="TVisual">The type of visual that the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" /> items will be templated into.</typeparam>
            <summary>A base class for a view that contains a templated list of items.</summary>
            <remarks>
                <para>
        This class is used as a base class for views that wish to take in a list of user objects and produce views for each of them to be displayed, such as <see cref="T:Xamarin.Forms.ListView" />. The generic
        argument is used to specify the type of visual that the view expects. In the case of <see cref="T:Xamarin.Forms.ListView" />, only <see cref="T:Xamarin.Forms.Cell" /> subclasses are accepted, so that's
        what it provides as its argument.
      </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.CreateDefault(System.Object)">
            <param name="item">The user object </param>
            <summary>Creates a default <typeparamref name="TVisual" /> instance for <paramref name="item" />.</summary>
            <returns>An instance of the <typeparamref name="TVisual" /> class.</returns>
            <remarks>
                <para>This method is called by the templating system when <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemTemplate" /> is <see langword="null" />.</para>
                <para>The <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> of the returned object will automatically be set to <paramref name="item" />, there is no
          need to set it yourself. If you do, it will be overridden.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemsView`1.ItemsSource">
            <summary>Gets or sets the source of items to template and display.</summary>
            <value>To be added.</value>
            <remarks>
                <para>While any <see cref="T:System.Collections.IEnumerable" /> implementer is accepted, any that do not implement <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.IReadOnlyList{T}" />
						(where T is a class) will be converted to list by iterating.</para>
                <para>If your collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />, any changes raised from the event on this interface will be reflected in the items view. Note that if the event
						is raised on another thread the main thread, the results will be unpredictable depending on the platform. To safely modify your collection (and raise the event) from another thread, call
						<see cref="M:Xamarin.Forms.BindingBase.EnableCollectionSynchronization" /> to enable proper synchronization of access to the thread.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.ItemsView`1.ItemsSourceProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemSource" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ItemsView`1.ItemTemplate">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.DataTemplate" /> to apply to the <see cref="M:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />.</summary>
            <value>The <see cref="T:Xamarin.Forms.DataTemplate" /> for the <see cref="T:Xamarin.Forms.ItemsView" />, or <see langword="null" /></value>
            <remarks>
                <para>The ItemTemplate is used to define the visual appearance of objects from the <see cref="P.Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />. Through
          the item template you can set up data bindings to the user objects supplied to automatically fill in the visual and respond to any changes in the user
          object.</para>
                <para>If the item template is <see langword="null" />, <see cref="M.Xamarin.Forms.ItemsView{TVisual}.CreateDefault" /> is called and the result is used as the visual.</para>
                <example>
                    <para>In this example, a template for a <see cref="T:Xamarin.Forms.TextCell" /> is created for a simple user object.</para>
                    <code lang="C#"><![CDATA[
class Person
{
  public string FullName
  {
    get;
    set;
  }
  
  public string Address
  {
    get;
    set;
  }
}

void SetupView()
{
  var template = new DataTemplate (typeof (TextCell));
  
  // We can set data bindings to our supplied objects.
  template.SetBinding (TextCell.TextProperty, "FullName");
  template.SetBinding (TextCell.DetailProperty, "Address");
  
  // We can also set values that will apply to each item.
  template.SetValue (TextCell.TextColorProperty, Color.Red);
  
  itemsView.ItemTemplate = temeplate;
  itemsView.ItemsSource = new[] {
    new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
    new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
  };
}
            ]]></code>
                </example>
            </remarks>
            <altmember cref="T:Xamarin.Forms.DataTemplate" />
            <altmember cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemsSource" />
            <altmember cref="M:Xamarin.Forms.ItemsView{TVisual}.CreateDefault" />
        </member>
        <member name="F:Xamarin.Forms.ItemsView`1.ItemTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ItemsView{TVisual}.ItemTemplate" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.SetupContent(TVisual,System.Int32)">
            <param name="content">The visual content to setup.</param>
            <param name="index">The index of the content.</param>
            <summary>Performs any additional setup for the content at creation time.</summary>
            <remarks>
                <para>This method is called when the <see cref="T:Xamarin.Forms.ItemsView{TVisual}" /> is creating visuals for user items. At this point,
          the <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> will have been set. You can override this method to perform additional setup
          for content specific to your <see cref="T:Xamarin.Forms.ItemsView{TVisual}" /> subclass. <see cref="T:Xamarin.Forms.ListView" />, for example, uses
          this method to set <see cref="P:Xamarin.Forms.Element.Parent" /> to itself.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.Xamarin#Forms#IItemsView{TVisual}#CreateDefault(System.Object)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ItemsView`1.Xamarin#Forms#IItemsView{TVisual}#SetupContent(TVisual,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemTappedEventArgs">
            <summary>Event arguments for the <see cref="E:Xamarin.Forms.ListView.ItemTapped" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ItemTappedEventArgs(System.Object,System.Object)">
            <param name="group">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemTappedEventArgs.Group">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ItemTappedEventArgs.Item">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ItemVisibilityEventArgs">
            <summary>Event args when an items visiblity has been changed in a <see cref="T:Xamarin.Forms.ListView" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ItemVisibilityEventArgs(System.Object)">
            <param name="item">The modified item.</param>
            <summary>Initializes a new instance of the ItemVisibilityEventArgs class with the item whose visibility has changed.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ItemVisibilityEventArgs.Item">
            <summary>The item from the <see cref="P:Xamarin.Forms.ListView.ItemsSource" /> whose visibility has changed.</summary>
            <value>An object.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.IValueConverter">
            <summary>Interface defining methods for two-way value conversion between types.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <param name="value">To be added.</param>
            <param name="targetType">To be added.</param>
            <param name="parameter">To be added.</param>
            <param name="culture">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.IViewContainer`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>The type of element that can be added to the container.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.IViewContainer`1.Children">
            <summary>The children collection of a visual element.</summary>
            <value>The collection containing the visual elements children.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Keyboard">
            <summary>Default keyboard and base class for specialized keyboards, such as those for telephone numbers, email, and URLs.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Chat">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Keyboard.Create(Xamarin.Forms.KeyboardFlags)">
            <param name="flags">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Default">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Email">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Numeric">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Telephone">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Text">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Keyboard.Url">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.KeyboardFlags">
            <summary>Flagging enumeration for Keyboard options such as Capitalization, Spellcheck, and Suggestions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.All">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.CapitalizeSentence">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.Spellcheck">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.KeyboardFlags.Suggestions">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.KeyboardTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string into a <see cref="T:Xamarin.Forms.Keyboard" />.</summary>
            <remarks>
                <para>
                    <example language="XAML">The following XAML snippet illustrate a case where a KeyboardTypeConverter is used behind the scenes:<code lang="C#"><![CDATA[
&lt;Entry Keyboard="Keyboard.Telephone" /&gt; 
    ]]></code></example>
                </para>
                <para>The following shows some examples of <see cref="T:Xamarin.Forms.KeyboardTypeConverter" /> forms:</para>
                <example>
                    <code lang="C#"><![CDATA[
var converter = new KeyboardTypeConverter ();
foreach (var kvp in new Dictionary&lt;string, Keyboard&gt; {
	{"Keyboard.Default", Keyboard.Default},
	{"Keyboard.Email", Keyboard.Email},
	{"Keyboard.Text", Keyboard.Text},
	{"Keyboard.Url", Keyboard.Url},
	{"Keyboard.Telephone", Keyboard.Telephone},
	{"Keyboard.Chat", Keyboard.Chat},
})
Assert.AreSame (kvp.Value, converter.ConvertFrom (kvp.Key));
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.KeyboardTypeConverter">
            <summary>Initializes a new instance of the KayboardTypeConverter class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.KeyboardTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">The type of the object.</param>
            <summary>Returns wheher this converter can convert an object of the given type.</summary>
            <returns>
                <see langword="true" /> if the KeyboardTypeConverter can convert from sourceType. <see langword="false" /> otherwise.</returns>
            <remarks>This method only returns <see langword="true" /> is sourceType is <see cref="T:System.String" />.</remarks>
        </member>
        <member name="M:Xamarin.Forms.KeyboardTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">The Culture fo the value parameter.</param>
            <param name="value">The object to convert from.</param>
            <summary>TConvert the given value into a Keyboard.</summary>
            <returns>A <see cref="T:Xamarin.Forms.Keyboard" />.</returns>
            <remarks>This will throw an IvalidOperationException if the conversion failed.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Label">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that displays text.</summary>
            <remarks>A Label is used to display single-line text elements as well as multi-lines blocks of text.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Label">
            <summary>Initializes a new instance of the Label class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.Font">
            <summary>Gets or sets the Font for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Font" /> value for the Label. The default is <see langword="null" />, which represents the default font on the platform.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.FontProperty">
            <summary>Identifies the Font bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.LineBreakMode">
            <summary>Gets or sets the LineBreakMode for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.LineBreakMode" /> value for the Label. The default is <see cref="E:Xamarin.Forms.LineBreakMode.WordWrap" /></value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.LineBreakModeProperty">
            <summary>Identifies the LineBreakMode bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.Text">
            <summary>Gets or sets the LineBreakMode for the Label. This is a bindable property.</summary>
            <value>The <see cref="T:System.String" /> value to be displayed inside of the Label. This is a bindable property.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.TextColor">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.Color" /> for the text of this Label. This is a bindable property.</summary>
            <value>The <see cref="T:Xamarin.Forms.Color" /> value.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.XAlign">
            <summary>Gets or sets the horizontal alignment for the Text inside of the Label bound.</summary>
            <value>The <see cref="T:Xamarin.Forms.TextAlignment" /> value. The default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />, i.e. the text is left-aligned.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.XAlignProperty">
            <summary>Identifies the XAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Label.YAlign">
            <summary>Gets or sets the vertical alignment for the Text inside of the Label bound.</summary>
            <value>The <see cref="T:Xamarin.Forms.TextAlignment" /> value. The default is <see cref="E:Xamarin.Forms.TextAlignment.Start" />, i.e. the text is top-aligned.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Label.YAlignProperty">
            <summary>Identifies the YAlign bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Layout">
            <summary>
                <para>Provides the base class for all Layout elements. Use Layout elements to position and size child elements in Forms applications.</para>
            </summary>
            <remarks>
                <para>Subtypes of <see cref="T:Xamarin.Forms.Layout" /> include <see cref="T:Xamarin.Forms.ContentView" />, <see cref="T:Xamarin.Forms.ScrollView" />, and <see cref="T:Xamarin.Forms.Layout`1" />, as shown in the following diagram.</para>
                <para>The <see cref="P:Xamarin.Forms.Layout`1.Children" /> property of <see cref="T:Xamarin.Forms.Layout`1" /> contains a list of children of the parameterized type <c>T</c>, which must be a type of <see cref="T:Xamarin.Forms.View" />. Since <see cref="T:Xamarin.Forms.Layout" /> is itself a subclass of <see cref="T:Xamarin.Forms.View" />, this allows <see cref="T:Xamarin.Forms.Layout" />s to hold sub-layouts, scrolling regions, etc.</para>
                <para>
                    <img href="Element.Hierarchy.png" />
                </para>
            </remarks>
            <altmember cref="T:Xamarin.Forms.ContentView" />
            <altmember cref="T:Xamarin.Forms.Layout`1" />
            <altmember cref="T:Xamarin.Forms.ScrollView" />
        </member>
        <member name="M:Xamarin.Forms.Layout.ForceLayout">
            <summary>Forces a layout cycle on the element and all of its descendants.</summary>
            <remarks>
                <para>Calling ForceLayout frequently can have negative impacts on performance.</para>
                <para>The layout cycle </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.GetSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <param name="heightConstraint">The available height that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <summary>Returns the <see cref="T:Xamarin.Forms.SizeRequest" /> of the Layout. Calling this method begins the measure pass of a layout cycle.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains a requested size and a minimum size.</returns>
            <remarks>
                <para>
            Calling GetSizeRequest causes a measure pass to occur for the subtree of elements it is called on. It is ideal to only call GetSizeRequest when needed as excessive calls can negatively impact the performance of the app. Overriding GetSizeRequest should only be done if the developer wants to ignore Width/HeightRequest. More likely a subclass would wish to override <see cref="M:Xamarin.Forms.VisualElement.OnSizeRequest (double, double)" />.
            </para>
            </remarks>
            <altmember cref="M:Xamarin.Forms.OnSizeRequest (double, double)" />
        </member>
        <member name="P:Xamarin.Forms.Layout.IsClippedToBounds">
            <summary>Gets or sets a value which determines if the Layout should clip its children to its bounds.</summary>
            <value>
                <see langword="true" /> if the Layout is clipped; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Layout.IsClippedToBoundsProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Layout.IsClippedToBounds" /> bindable property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Layout.LayoutChanged">
            <summary>Occurs at the end of a layout cycle if any of the child element's <see cref="P:Xamarin.Forms.VisualElement.Bounds" /> have changed.</summary>
            <remarks>
                <para>Developers wishing to implement animations may wish to begin them at the end of a LayoutChanged event.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle)">
            <param name="child">The child element to be positioned.</param>
            <param name="region">The bounding region in which the child should be positioned.</param>
            <summary>Positions a child element into a bounding region while respecting the child elements <see cref="P:Xamarin.Forms.VisualElement.HorizontalOptions" /> and <see cref="P:Xamarin.Forms.VisualElement.VerticalOptions" />.</summary>
            <remarks>This method is called in the layout cycle after the general regions for each child have been calculated. This method will handle positioning the element relative to the bounding region given if the bounding region given is larger than the child's desired size.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
            <summary>Positions and sizes the children of a Layout.</summary>
            <remarks>Implementors wishing to change the default behavior of a Layout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View)">
            <param name="view">The view to lower in the visual stack.</param>
            <summary>Sends a child to the back of the visual stack.</summary>
            <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which the children are enumerated.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object,System.EventArgs)">
            <param name="sender">The child element whose preferred size changed.</param>
            <param name="e">The event data.</param>
            <summary>Invoked whenever a child of the layout has emitted <see cref="E:Xamarin.Forms.VisualElement.MeaureInvalidated" />. Implement this method to add class handling for this event.</summary>
            <remarks>This method has a default implementation and and application developers must call the base implementation.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The new width of the element.</param>
            <param name="height">The new height of the element.</param>
            <summary>This method is called when the size of the element is set during a layout cycle. This method is called directly before the <see cref="E:Xamarin.Forms.VisualElement.SizeChanged" /> event is emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has a default implementation which triggers the layout cycle of the Layout to begin.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Layout.Padding">
            <summary>Gets or sets the inner padding of the Layout.</summary>
            <value>The Thickness values for the layout. The default value is a Thickness with all values set to 0.</value>
            <remarks>
                <para>
            The padding is the space between the bounds of a layout and the bounding region into which its children should be arranged into.
          </para>
                <para>
                    <example lang="C#">
              The following example shows setting the padding of a Layout to inset its children.
              <code lang="C#"><![CDATA[
  var stackLayout = new StackLayout {
    Padding = new Thickness (10, 10, 10, 20),
    Children = {
      new Label {Text = "Hello"},
      new Label {Text = "World"}
    }
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.Layout.PaddingProperty">
            <summary>Identifies the Padding bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View)">
            <param name="view">The view to raise in the visual stack.</param>
            <summary>Sends a child to the front of the visual stack.</summary>
            <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which they are enumerated.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout.UpdateChildrenLayout">
            <summary>Instructs the layout to relayout all of its children.</summary>
            <remarks>This method starts a new layout cycle for the layout. Invoking this method frequently can negatively impact performance.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Layout`1">
            <typeparam name="T">The subclass of <see cref="T:Xamarin.Forms.View" /> the layout contains.</typeparam>
            <summary>A base implementation of a layout with undefined behavior and multiple children.</summary>
            <remarks>
                <para>
                    <see cref="T:Xamarin.Forms.Layout`1" />s contain <see cref="P:Xamarin.Forms.Layout`1.Children" /> that are of the type <c>T</c> with which the <see cref="T:Xamarin.Forms.Layout`1" /> was specified. This <c>T</c> must be of type <see cref="T:Xamarin.Forms.View" />. Since <see cref="T:Xamarin.Forms.Layout" />s are subclasses of <see cref="T:Xamarin.Forms.View" />, this means that layouts may be nested, contain scrolling regions, etc.  
      </para>
                <para>The following image shows the relationship between <see cref="T:Xamarin.Forms.View" />, <see cref="T:Xamarin.Forms.Layout" />, <see cref="T:Xamarin.Forms.Layout`1" />, and important subtypes.</para>
                <para>
                    <img href="Element.Hierarchy.png" />
                </para>
                <para>
                    <example lang="C#">
          The following example shows adding and removing elements from a layout.
          <code lang="C#"><![CDATA[
  void UpdateItems (Layout&lt;View&gt; layout, IEnumerable newItems)
  {
    layout.Children.Clear ();
    foreach (var item in newItems) {
      layout.Children.Add (item);
    }
  }
          ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Layout`1">
            <summary>Provides the base initialization for objects derived from the Layout&lt;T&gt; class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Layout`1.Children">
            <summary>Gets an IList&lt;View&gt; of child element of the Layout.</summary>
            <value>A IList&lt;View&gt;. The default is an empty list.</value>
            <remarks>
                <para>
            The Children collection of a Layout contains all the children added throught the public add/remove interface. Internal children will not be exposed through this collection.
          </para>
                <para>
                    <example lang="C#">
              The following shows the creation of a layout, setting a property, and adding the children in the object initializer.
              <code lang="C#"><![CDATA[
  var stack = new StackLayout {
    Spacing = 20,
    Children = {
      new Label {Text = "Hello World!"},
      new Button {Text = "Click Me!"}
    }
  };
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnAdded(T)">
            <param name="view">The view which was added.</param>
            <summary>Invoked when a child is added to the layout. Implement this method to add class handling for this event.</summary>
            <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildAdded (Xamarin.Forms.Element element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Layout`1.OnRemoved(T)">
            <param name="view">The view which was removed.</param>
            <summary>Invoked when a child is removed from the layout. Implement this method to add class handling for this event.</summary>
            <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildRemoved (Xamarin.Forms.Element element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
        </member>
        <member name="T:Xamarin.Forms.LayoutAlignment">
            <summary>Values that represent LayoutAlignment.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Center">
            <summary>The center of an alignment.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.End">
            <summary>The end of an alignment. Usually the Bottom or Right.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Fill">
            <summary>Fill the entire area if possible.</summary>
        </member>
        <member name="F:Xamarin.Forms.LayoutAlignment.Start">
            <summary>The start of an alignment. Usually the Top or Left.</summary>
        </member>
        <member name="T:Xamarin.Forms.LayoutOptions">
            <summary>A struct whose static members define various alignment and expansion options.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.LayoutOptions(Xamarin.Forms.LayoutAlignment,System.Boolean)">
            <param name="alignment">To be added.</param>
            <param name="expands">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.LayoutOptions.Alignment">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Center">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.CenterAndExpand">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.End">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.EndAndExpand">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.LayoutOptions.Expands">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Fill">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.FillAndExpand">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.Start">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LayoutOptions.StartAndExpand">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.LineBreakMode">
            <summary>Enumeration specifying various options for line breaking.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.CharacterWrap">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.HeadTruncation">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.MiddleTruncation">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.NoWrap">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.TailTruncation">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.LineBreakMode.WordWrap">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.ListView">
            <summary>An <see cref="T:Xamarin.Forms.ItemsView" /> that displays a collection of data as a vertical list.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ListView">
            <summary>Creates and initializes a new instance of the <see cref="T:Xamarin.Forms.ListView" /> class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ListView.CreateDefault(System.Object)">
            <param name="item">The item to create a default visual for.</param>
            <summary>Creates an instance of the default visual representation of an item.</summary>
            <returns>
          A <see cref="T:Xamarin.Forms.TextCell" /> instance with its text set to the string representation of the object (<see cref="M:System.Object.ToString" />).
        </returns>
            <remarks>
                <para>
            This method is called by the templating system when <see cref="P:Xamarin.Forms.ListView.ItemTemplate" /> is <see langword="null" />.
          </para>
                <para>
            The <see cref="P:Xamarin.Forms.BindableObject.BindingContext" /> of the returned object will automatically be set to <paramref name="item" />, there is no
            need to set it yourself. If you do, it will be overridden.
          </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupDisplayBinding">
            <summary>Gets or sets the binding to use for display the group header.</summary>
            <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see cref="null" />.</value>
            <remarks>
                <para>
						This binding can be used to simply set a the text of the group headers without defining a full template and uses the default visuals
						of the platform to display it. The binding is applied to the <see cref="T:System.Collections.IEnumerable" /> of the group.
					</para>
                <para>
						This property is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property. Setting it will set
						<see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> to <see langword="null" />.
					</para>
            </remarks>
            <example>
                <para>This example shows an alphabetized list of people, grouped by first initial with the display binding set.</para>
                <code lang="C#"><![CDATA[
	class Person
	{
		public string FullName
		{
			get;
			set;
		}

		public string Address
		{
			get;
			set;
		}
	}
						]]></code>
                <code lang="C#"><![CDATA[
	class Group : ObservableCollection&lt;Person&gt;
	{
		public Group (string firstInitial)
		{
			FirstInitial = firstInitial;
		}

		public string FirstInitial
		{
			get;
			private set;
		}
	}
						]]></code>
                <code lang="C#"><![CDATA[
	ListView CreateListView()
	{
		var listView = new ListView {
			IsGroupingEnabled = true,
			GroupDisplayBinding = new Binding ("FirstInitial"),
			GroupShortNameBinding = new Binding ("FirstInitial")
		};

		var template = new DataTemplate (typeof (TextCell));
		template.SetBinding (TextCell.TextProperty, "FullName");
		template.SetBinding (TextCell.DetailProperty, "Address");

		itemsView.ItemTemplate = temeplate;
		itemsView.ItemsSource = new[] {
			new Group ("C") {
				new Person { FullName = "Caprice Nave" }
			},

			new Group ("J") {
				new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
				new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
			}
		};
	}
						]]></code>
            </example>
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupDisplayBindingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupHeaderTemplate">
            <summary>Gets or sets a <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers.</summary>
            <value>The <see cref="T:Xamarin.Forms.DataTemplate" /> for group headers, or <see langword="null" />.</value>
            <remarks>
                <para>
            Use this property to define a template for a <see cref="T:Xamarin.Forms.Cell" /> that will be used as the header for groups in this
            <see cref="T:Xamarin.Forms.ListView" />. The <see cref="P:Xamarin.BindableObject.BindingContext" /> will be the <see cref="T:System.Collections.IEnumerable" />
            for each group.
          </para>
                <para>
            GroupHeaderTemplate is mutually exclusive with <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />. Setting this property
            will set <see cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" /> to <see langword="null" />.
          </para>
                <para>Empty groups will still display a group header.</para>
            </remarks>
            <altmember cref="P:Xamarin.Forms.ListView.ItemsSource" />
            <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
            <altmember cref="P:Xamarin.Forms.ListView.IsGroupingEnabled" />
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupHeaderTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.GroupShortNameBinding">
            <summary>Gets or sets a binding for the name to display in grouped jump lists.</summary>
            <value>The <see cref="T:Xamarin.Forms.BindingBase" /> instance to apply to grouped lists, or <see cref="null" />.</value>
            <remarks>
                <para>
            When grouping items in a <see cref="T:Xamarin.Forms.ListView" />, it is often useful to have jump lists to jump to specific
            sections in the list. For example, in an alphabetically grouped lists, the jump list would be the the letter of each group.
            This binding is applied against the <see cref="T:System.Collections.IEnumerable" /> of each group to select the short name to display
            in the jump list.
          </para>
                <para>
            Note: On Android, there is no displayed jump list.
          </para>
            </remarks>
            <example>
                <para>This example shows an alphabetized list of people, grouped by first initial with the short name binding set.</para>
                <code lang="C#"><![CDATA[
class Person
{
  public string FullName
  {
    get;
    set;
  }

  public string Address
  {
    get;
    set;
  }
}
          ]]></code>
                <code lang="C#"><![CDATA[
class Group : ObservableCollection&lt;Person&gt;
{
  public Group (string firstInitial)
  {
    FirstInitial = firstInitial;
  }

  public string FirstInitial
  {
    get;
    private set;
  }
}
          ]]></code>
                <code lang="C#"><![CDATA[
ListView CreateListView()
{
  var listView = new ListView {
    IsGroupingEnabled = true,
    GroupDisplayBinding = new Binding ("FirstInitial"),
    GroupShortNameBinding = new Binding ("FirstInitial")
  };

  var template = new DataTemplate (typeof (TextCell));
  template.SetBinding (TextCell.TextProperty, "FullName");
  template.SetBinding (TextCell.DetailProperty, "Address");

  itemsView.ItemTemplate = temeplate;
  itemsView.ItemsSource = new[] {
		new Group ("C") {
			new Person { FullName = "Caprice Nave" }
		},

    new Group ("J") {
			new Person { FullName = "James Smith", Address = "404 Nowhere Street" },
			new Person { FullName = "John Doe", Address = "404 Nowhere Ave" }
		}
  };
}
          ]]></code>
            </example>
        </member>
        <member name="F:Xamarin.Forms.ListView.GroupShortNameBindingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.GroupShortNameBinding" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.HasUnevenRows">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.HasUnevenRowsProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.HasUnevenRowsProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ListView.IsGroupingEnabled">
            <summary>Gets or sets whether or not grouping is enabled for <see cref="T:Xamarin.Forms.ListView" />.</summary>
            <value>
                <see langword="true" /> if grouping is enabled, <see langword="false" /> otherwise and by default.
        </value>
            <remarks />
            <altmember cref="P:Xamarin.Forms.ListView.GroupDisplayBinding" />
            <altmember cref="P:Xamarin.Forms.ListView.GroupHeaderTemplate" />
        </member>
        <member name="F:Xamarin.Forms.ListView.IsGroupingEnabledProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.IsGroupingEnabledProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemAppearing">
            <summary>Occurs when the visual representation of an item is being added to the visual layout.</summary>
            <remarks>This method is guaranteed to fire at some point before the element is on screen.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemDisappearing">
            <summary>Occurs when the visual representation of an item is being removed from the visual layout.</summary>
            <remarks>This method is for virtualization usage only. It is not guaranteed to fire for all visible items when the List is removed from the screen. Additionally it fires during virtualization, which may not correspond directly with removal from the screen depending on the platform virtualization technique used.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemSelected">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.ListView.ItemTapped">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.RowHeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ListView.RowHeightProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ListView.SelectedItem">
            <summary>Gets or sets the currently selected item from the <see cref="P:Xamarin.Forms.ListView.ItemsSource" />.</summary>
            <value>The selected item or <see langword="null" /> if no item is selected.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ListView.SelectedItemProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.ListView.SelectedItemProperty" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#ICellVisibilityProxy#SendCellAppearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ListView.Xamarin#Forms#ICellVisibilityProxy#SendCellDisappearing(Xamarin.Forms.Cell)">
            <param name="cell">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MasterDetailPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that manages two panes of information.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.MasterDetailPage">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.Detail">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.IsGestureEnabled">
            <summary>Gets or sets a value that turns on or off the gesture to reveal the master page. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if gesture is enabled; otherwise <see langword="false" />. Default is <see langword="true" />.</value>
            <remarks>Has no effect on Windows Phone.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterDetailPage.IsGestureEnabledProperty">
            <summary>Identifies the IsGestureEnabled bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.IsPresented">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.MasterDetailPage.IsPresentedChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MasterDetailPage.IsPresentedProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MasterDetailPage.Master">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MasterDetailPage.OnParentSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.MessagingCenter">
            <summary>Associates a callback on subscribers with a specific message name.</summary>
            <remarks>
                <para>The following shows a simple example of a strongly-typed callback using <see cref="T:Xamarin.Forms.MessagingCenter" /> is:</para>
                <example>
                    <code lang="C#"><![CDATA[
public class SubscriberThing 
{
	public int IntProperty { get; set; }
}

var subscriber = new SubscriberThing();
MessagingCenter.Subscribe&lt;MyPage, int&gt; (subscriber, "IntPropertyMessage", (s, e) =&gt; {
	subscriber.IntProperty = e; 
});

//...later...

MessagingCenter.Send&lt;MyPage, int&gt;(this, "IntPropertyMessage", 2);
Assert.AreEqual(2, subscriber.IntProperty);
          ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Send``1(``0,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="sender">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Send``2(``0,System.String,``1)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="sender">To be added.</param>
            <param name="message">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Subscribe``1(System.Object,System.String,System.Action{``0},``0)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Subscribe``2(System.Object,System.String,System.Action{``0,``1},``0)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Unsubscribe``1(System.Object,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MessagingCenter.Unsubscribe``1(System.Object,System.String)">
            <typeparam name="TSender">To be added.</typeparam>
            <typeparam name="TArgs">To be added.</typeparam>
            <param name="subscriber">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ModifierType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Button1Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Button2Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Button3Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Button4Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Button5Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.ControlMask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.LockMask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Mod1Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Mod2Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Mod3Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Mod4Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.Mod5Mask">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ModifierType.ShiftMask">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.MultiPage`1">
            <typeparam name="T">The particular subclass of Page the MultiPage services.</typeparam>
            <summary>A bindable, templatable base class for pages which contain multiple sub-pages.</summary>
            <remarks>Provides a base implementation for binding and templating pages.</remarks>
        </member>
        <member name="C:Xamarin.Forms.MultiPage`1">
            <summary>Provides the base initialization for objects derived from the MultiPage&lt;T&gt; class..</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.Children">
            <summary>Gets an IList&lt;Page&gt; of child element of the MultiPage.</summary>
            <value>A IList&lt;Page&gt;. The default is an empty list.</value>
            <remarks>
                <para>
            The Children collection of a MultiPage contains all the children added throught the public add/remove interface. Internal children will not be exposed through this collection.
          </para>
                <para>
                    <example lang="C#">
              The following shows the creation of a multipage, setting a property, and adding the children in the object initializer.
              <code lang="C#"><![CDATA[
  Page pageOne = CreatePageOne ();
  Page pageTwo = CreatePageTwo ();

  var tabbedPage = new TabbedPage {
    Title = "My App",
    Children = {
      pageOne,
      pageTwo
    }
  };
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.CreateDefault(System.Object)">
            <param name="item">The object which the default page should be templated from.</param>
            <summary>Create default provides a default method of creating new pages from objects in a binding scenario.</summary>
            <returns>The newly created page.</returns>
            <remarks>Most implementors will not need to use or override CreateDefault.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.CurrentPage">
            <summary>Gets or sets the currently selected page.</summary>
            <value>The current page. The default value is null.</value>
            <remarks>The default page will usually get set when the multi-page is displayed or templated.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.ItemsSource">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.ItemsSourceProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.ItemTemplate">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.ItemTemplateProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.MultiPage{T}.ItemsSource" /> ItemsSource bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnChildAdded(Xamarin.Forms.Element)">
            <param name="child">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnPagesChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <param name="e">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.MultiPage`1.PagesChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.MultiPage`1.SelectedItem">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.MultiPage`1.SelectedItemProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.SetupContent(T,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.Xamarin#Forms#IItemsView{T}#CreateDefault(System.Object)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.MultiPage`1.Xamarin#Forms#IItemsView{T}#SetupContent(T,System.Int32)">
            <param name="content">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.NamedSize">
            <summary>Represents pre-defined font sizes.</summary>
            <remarks>The exact pixel-value depends on the platform on which Forms runs.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Large">
            <summary>A Large font size, for titles or other important text elements.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Medium">
            <summary>A default font size, to be used in stand alone labels or buttons.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Micro">
            <summary>The smallest readable font size for the device. Think about this like legal footnotes.</summary>
        </member>
        <member name="F:Xamarin.Forms.NamedSize.Small">
            <summary>A small but readable font size. Use this for block of text.</summary>
        </member>
        <member name="T:Xamarin.Forms.NameScopeExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.Element" /> and <see cref="T:Xamarin.Forms.INameScope" /> that add strongly-typed FindByName methods.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NameScopeExtensions.FindByName``1(Xamarin.Forms.Element,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="element">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.NavigationEventArgs">
            <summary>EventArgs for the NavigationPage's navigation events.</summary>
            <remarks />
            <altmember cref="E:Xamarin.Forms.NavigationPage.Pushed" />
            <altmember cref="E:Xamarin.Forms.NavigationPage.Popped" />
            <altmember cref="E:Xamarin.Forms.NavigationPage.PoppedToRoot" />
        </member>
        <member name="C:Xamarin.Forms.NavigationEventArgs(Xamarin.Forms.Page)">
            <param name="page">The page that was popped or is newly visible.</param>
            <summary />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.NavigationEventArgs.Page">
            <summary>Gets the page that was removed or is newly visible.</summary>
            <value />
            <remarks>
                <para>For <altmember cref="E:Xamarin.Forms.NavigationPage.Pushed" />, this is the <see cref="T:Xamarin.Forms.Page" /> that was removed. For <altmember cref="E:Xamarin.Forms.NavigationPage.Pushed" />
					and <altmember cref="E:Xamarin.Forms.NavigationPage.PoppedToRoot" /> it is the newly visible page, the pushed page or the root respectively.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Forms.NavigationPage">
            <summary>A <see cref="T:Xamarin.Forms.Page" /> that manages the navigation and user-experience of a stack of other pages.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.NavigationPage">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.NavigationPage(Xamarin.Forms.Page)">
            <param name="root">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.BackButtonTitleProperty">
            <summary>Identifies the property associated with the title of the back button.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.CurrentPage">
            <summary>The <see cref="T:Xamarin.Forms.Page" /> that is currently top-most on the navigation stack.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.CurrentPageProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.NavigationPage.CurrentPage" /> property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetBackButtonTitle(Xamarin.Forms.BindableObject)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> whose back-button's title is being requested.</param>
            <summary>The title of the back button for the specified <paramref name="page" />.</summary>
            <returns>The title of the back button that would be shown if the specified <paramref name="page" /> were the <see cref="P:Xamarin.Forms.CurrentPage" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetHasNavigationBar(Xamarin.Forms.BindableObject)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> being queried.</param>
            <summary>Whether the <paramref name="page" /> has a navigation bar.</summary>
            <returns>
                <see langword="true" /> if <paramref name="page" /> would display a navigation bar were it the <see cref="P:Xamarin.Forms.NavigationPage.CurrentPage" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.GetTitleIcon(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose title icon is being set.</param>
            <summary>Retrieves the path to the file providing the title icon for the <paramref name="bindable" />.</summary>
            <returns>The path to the file providing the title icon for the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.HasNavigationBarProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopAsync">
            <summary>Asynchronously removes the top <see cref="T:Xamarin.Forms.Page" /> from the navigation stack.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Page" /> that had been at the top of the navigation stack.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.Popped">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.PoppedToRoot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PopToRootAsync">
            <summary>Pops all but the root <see cref="T:Xamarin.Forms.Page" /> off the navigation stack.</summary>
            <returns>A task representing the asynchronous dismiss operation.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.PushAsync(Xamarin.Forms.Page)">
            <param name="page">The <see cref="T:Xamarin.Forms.Page" /> to present modally.</param>
            <summary>Presents a <see cref="T:Xamarin.Forms.Page" /> modally.</summary>
            <returns>An awaitable Task, indicating the PushModal completion.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.NavigationPage.Pushed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetBackButtonTitle(Xamarin.Forms.BindableObject,System.String)">
            <param name="page">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetHasNavigationBar(Xamarin.Forms.BindableObject,System.Boolean)">
            <param name="page">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.NavigationPage.SetTitleIcon(Xamarin.Forms.BindableObject,System.String)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose title icon is being set.</param>
            <param name="value">The file path to the icon image file.</param>
            <summary>Sets the title icon of the <paramref name="bindable" /> to the icon file at <paramref name="value" />.</summary>
            <remarks>
                <example>
                    <code lang="C#"><![CDATA[
public class MyPage : NavigationPage
{
	public MyPage ()
	{
		var myContentPage = new MyContentPage (Color.White);
		this.Push (myContentPage);

		var s = "icon-45.png";
		NavigationPage.SetTitleIcon (myContentPage, s);
	}
}
          ]]></code>
                </example>
                <para>
                    <img href="NavigationPage.TitleIcon.png" />
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.NavigationPage.Tint">
            <summary>The color to be used as the Tint of the <see cref="T:Xamarin.Forms.NavigationPage" />.</summary>
            <value>To be added.</value>
            <remarks>
                <para>Tint is especially important in iOS 7 and later, where the Tint is primary way to specify which controls on screen are active or have an action associated with them.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.TintProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.NavigationPage.Tint" /> bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.NavigationPage.TitleIconProperty">
            <summary>Indicates the <see cref="M:Xamarin.Forms.NavigationPage.SetTitleIcon" />/<see cref="M:Xamarin.Forms.NavigationPage.GetTitleIcon" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.OnPlatform`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>Provides the platform-specific implementation of T for the current <see cref="P:Xamarin.Forms.Device.OS" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.OnPlatform`1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.Android">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.iOS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.OnPlatform`1.op_Implicit(`0Xamarin`0.`0Forms`0.`0OnPlatform`0{`0T`0})~`0T`0">
            <param name="onPlatform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OnPlatform`1.WinPhone">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.OpenGLView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that displays OpenGL content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.OpenGLView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.OpenGLView.Display">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OpenGLView.HasRenderLoop">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.OpenGLView.HasRenderLoopProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.OpenGLView.OnDisplay">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Page">
            <summary>A <see cref="T:Xamarin.Forms.VisualElement" /> that occupies most or all of the screen and contains a single child.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Page">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.Appearing">
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> is about to appear.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.BackgroundImage">
            <summary>Identifies the image used as a background for the <see cref="T:Xamarin.Forms.Page" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.BackgroundImageProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.BackgroundImage" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.Disappearing">
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> is about to cease displaying.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.DisplayActionSheet(System.String,System.String,System.String,System.String[])">
            <param name="title">Title of the displayed action sheet.</param>
            <param name="cancel">Text to be displayed in the 'Cancel' button.</param>
            <param name="destruction">Text to be displayed in the 'Destruct' button.</param>
            <param name="buttons">Text labels for additional buttons.</param>
            <summary>Displays a native platform action sheet, allowing the application user to choose from several buttons.</summary>
            <returns>An awaitable Task that displays an action sheet and returns the Text of the button pressed by the user.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.DisplayAlert(System.String,System.String,System.String,System.String)">
            <param name="title">The title of the alert dialog.</param>
            <param name="message">The body text of the alert dialog.</param>
            <param name="accept">Text to be displayed on the 'Accept' button.</param>
            <param name="cancel">Text to be displayed on the 'Cancel' button.</param>
            <summary>Presents an alert dialog to the application user.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.ForceLayout">
            <summary>Forces the <see cref="T:Xamarin.Forms.Page" /> to perform a layout pass.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Icon">
            <summary>Resource identifier for the <see cref="T:Xamarin.Forms.Page" />'s associated icon.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.IconProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Icon" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.IsBusy">
            <summary>Marks the Page as busy. This will cause the platform specific global activity indicator to show a busy state.</summary>
            <value>A bool indicating if the Page is busy or not.</value>
            <remarks>Setting IsBusy to true on multiple pages at once will cause the global activity indicator to run until both are set back to false. It is the authors job to unset the IsBusy flag before cleaning up a Page.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.IsBusyProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.IsBusy" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Page.LayoutChanged">
            <summary>Raised when the layout of the <see cref="T:Xamarin.Forms.Page" /> has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">Left-hand side of layout area.</param>
            <param name="y">Top of layout area.</param>
            <param name="width">Width of layout area.</param>
            <param name="height">Height of layout area.</param>
            <summary>Lays out children <see cref="T:Xamarin.Forms.Element" />s into the specified area.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnAppearing">
            <summary>When overridden, allows application developers to customize behavior immediately prior to the <see cref="T:Xamarin.Forms.Page" /> becoming visible.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object,System.EventArgs)">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Indicates that the preferred size of a child <see cref="T:Xamarin.Forms.Element" /> has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnDisappearing">
            <summary>When overridden, allows the application developer to customize behavior as the <see cref="T:Xamarin.Forms.Page" /> disappears.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnParentSet">
            <summary>Called when the <see cref="T:Xamarin.Forms.Page" />'s <see cref="P:Xamarin.Forms.Element.Parent" /> property has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The width allocated to the <see cref="T:Xamarin.Forms.Page" />.</param>
            <param name="height">The height allocated to the <see cref="T:Xamarin.Forms.Page" />.</param>
            <summary>Indicates that the <see cref="T:Xamarin.Forms.Page" /> has been assigned a size.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Padding">
            <summary>The space between the content of the <see cref="T:Xamarin.Forms.Page" /> and it's border.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.PaddingProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Padding" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.Title">
            <summary>The <see cref="T:Xamarin.Forms.Page" />'s title.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Page.TitleProperty">
            <summary>Identifies the <see cref="P:Xamarin.Forms.Page.Title" /> property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Page.ToolbarItems">
            <summary>A set of <see cref="T:Xamarin.Forms.ToolbarItem" />s, implemented in a platform-specific manner.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Page.UpdateChildrenLayout">
            <summary>Requests that the children <see cref="T:Xamarin.Forms.Element" />s of the <see cref="T:Xamarin.Forms.Page" /> update their layouts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Picker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control for picking an element in a list.</summary>
            <remarks>
                <para>The visual representation of a Picker is similar to a <see cref="T:Xamarin.Forms.Entry" />, but a picker control appears in place of a keyboard.</para>
                <para>
                    <example lang="C#">The following example shows the creation of a Picker.<code lang="C#"><![CDATA[
var picker = new Picker {
  Title = "Set the correct value",
  Items = {"Foo", "Bar", "Baz", "Qux"},
};
]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.Picker">
            <summary>Initializes a new instance of the Picker class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Picker.Items">
            <summary>Gets the list of choices.</summary>
            <value>An IList&lt;string&gt; representing the Picker choices.</value>
            <remarks>This property is read-only, but exposes the IList&lt;&gt; interface, so items can be added using Add().</remarks>
        </member>
        <member name="P:Xamarin.Forms.Picker.SelectedIndex">
            <summary>Gets or sets the index of the slected item of the picker. This is a bindable property.</summary>
            <value>An 0-based index representing the selected item in the list. Default is -1.</value>
            <remarks>A value of -1 represents no item selected.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Picker.SelectedIndexChanged">
            <summary>Raised when the value of the SelectIndex property has changed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Picker.SelectedIndexProperty">
            <summary>Identifies the SelectedIndex bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Picker.Title">
            <summary>Gets or sets the title for the Picker. This is a bindable property.</summary>
            <value>A string.</value>
            <remarks>Depending on the platform, the Title is shown as a placeholder, headline, or not showed at all.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Picker.TitleProperty">
            <summary>Identifies the Title bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Point">
            <summary>Struct defining a 2-D point as a pair of doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Point(Xamarin.Forms.Size)">
            <param name="sz">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Point(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Distance(Xamarin.Forms.Point)">
            <param name="other">The <see cref="T:Xamarin.Forms.Point" /> to which the distance is calculated.</param>
            <summary>Calculates the distance between two points.</summary>
            <returns>The distance between <c>this</c> and the <paramref name="other" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Equals(System.Object)">
            <param name="o">Another <see cref="T:Xamarin.Forms.Point" />.</param>
            <summary>Returns <see langword="true" /> if the X and Y values of this are exactly equal to those in the argument.</summary>
            <returns>
                <see langword="true" /> if the X and Y values are equal to those in <paramref name="o" />. Returns <see langword="false" /> if <paramref name="o" /> is not a <see cref="T:Xamarin.Forms.Point" />.</returns>
            <remarks>
                <para>The <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> values of the <see cref="T:Xamarin.Forms.Point" /> are stored as <langword see="double" />s. Developers should be aware of the precision limits and issues that can arise when comparing floating-point values. In some circumstances, developers should consider the possibility of measuring approximate equality using the (considerably slower) <see cref="M:Xamarin.Forms.Point.Distance" /> method.</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.GetHashCode">
            <summary>Returns a hash value for the <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A value intended for efficient insertion and lookup in hashtable-based data structures.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.IsEmpty">
            <summary>Whether both X and Y are 0.</summary>
            <value>
                <see langword="true" /> if both <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> are 0.0.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Offset(System.Double,System.Double)">
            <param name="dx">The amount to add along the X axis.</param>
            <param name="dy">The amount to add along the Y axis.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> that translates the current <see cref="T:Xamarin.Forms.Point" /> by <paramref name="dx" /> and <paramref name="dy" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[this.X + dx, this.Y + dy]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Addition(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> to which <paramref name="sz" /> is being added.</param>
            <param name="sz">The values to add to <paramref name="pt" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> by adding a <see cref="T:Xamarin.Forms.Size" /> to a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[pt.X + sz.Width, pt.Y + sz.Height]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Equality(Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <param name="pt_a">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <param name="pt_b">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <summary>Whether the two <see cref="T:Xamarin.Forms.Point" />s are equal.</summary>
            <returns>
                <see langword="true" /> if the two <see cref="T:Xamarin.Forms.Point" />s have equal values.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Explicit(Xamarin.Forms.Point)~Xamarin.Forms.Size">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> to be translated as a <see cref="T:Xamarin.Forms.Size" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> and equivalent to the <paramref name="pt" />'s <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> properties.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Size" /> based on the <paramref name="pt" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Inequality(Xamarin.Forms.Point,Xamarin.Forms.Point)">
            <param name="pt_a">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <param name="pt_b">A <see cref="T:Xamarin.Forms.Point" /> to be compared.</param>
            <summary>Whether two points are not equal.</summary>
            <returns>
                <see langword="true" /> if <paramref name="pt_a" /> and <paramref name="pt_b" /> do not have equivalent X and Y values.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.op_Subtraction(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="pt">The <see cref="T:Xamarin.Forms.Point" /> from which <paramref name="sz" /> is to be subtracted.</param>
            <param name="sz">The <see cref="T:Xamarin.Forms.Size" /> whose <see cref="P:Xamarin.Forms.Size.Width" /> and <see cref="P:Xamarin.Forms.Size.Height" /> will be subtracted from <paramref name="pt" />'s <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" />.</param>
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> by subtracting a <see cref="T:Xamarin.Forms.Size" /> from a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> at <c>[pt.X - sz.Width, pt.Y - sz.Height]</c>.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.Round">
            <summary>Returns a new <see cref="T:Xamarin.Forms.Point" /> whose <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> have been rounded to the nearest integral value.</summary>
            <returns>A new <see cref="T:Xamarin.Forms.Point" /> whose <see cref="P:Xamarin.Forms.Point.X" /> and <see cref="P:Xamarin.Forms.Point.Y" /> have been rounded to the nearest integral value, per the behavior of Math.Round(Double).</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Point.ToString">
            <summary>A human-readable representation of the <see cref="T:Xamarin.Forms.Point" />.</summary>
            <returns>The string is formatted as "{{X={0} Y={1}}}".</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.X">
            <summary>Location along the horizontal axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Point.Y">
            <summary>Location along the vertical axis.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Point.Zero">
            <summary>The <see cref="T:Xamarin.Forms.Point" /> at {0,0}.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PointTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string to a <see cref="T:Xamarin.Forms.Point" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PointTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PointTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.PointTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ProgressBar">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control indicating a progress.</summary>
            <remarks>
                <para>
                    <example lang="C#">The following example shows the usage of a ProgressBar.<code lang="C#"><![CDATA[

//initial progress is 20%
var progressBar = new ProgressBar {
  Progress = .2,
};

// animate the progression to 80%, in 250ms
await progressBar.ProgressTo (.8, 250, Easing.Linear);

Debug.WriteLine ("Animation completed");
]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ProgressBar">
            <summary>Initializes a new instance of the ProgressBar class</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ProgressBar.Progress">
            <summary>Gets or sets the progress value. This is s bindable property.</summary>
            <value>A double representing the progress on a 0 to 1 scale.</value>
            <remarks>Values outside of the 0 to 1 range will be clamped.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ProgressBar.ProgressProperty">
            <summary>Identifies the Progress bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.ProgressBar.ProgressTo(System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="value">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>Animate the Progress property to value.</summary>
            <returns>A Task&lt;bool&gt; you can await on.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.PropertyChangingEventArgs">
            <summary>Event arguments for the <see cref="T:Xamarin.Forms.PropertyChangingEventHandler" /> delegate.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.PropertyChangingEventArgs(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.PropertyChangingEventArgs.PropertyName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.PropertyChangingEventHandler">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>Delegate for the <see cref="E:Xamarin.Forms.BindableObject.PropertyChanging" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Rectangle">
            <summary>Struct defining a rectangle, using doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Rectangle(Xamarin.Forms.Point,Xamarin.Forms.Size)">
            <param name="loc">To be added.</param>
            <param name="sz">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Rectangle(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Bottom">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Center">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(Xamarin.Forms.Point)">
            <param name="pt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(Xamarin.Forms.Rectangle)">
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Contains(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Equals(Xamarin.Forms.Rectangle)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Height">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Inflate(Xamarin.Forms.Size)">
            <param name="sz">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Inflate(System.Double,System.Double)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Intersect(Xamarin.Forms.Rectangle)">
            <param name="r">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Intersect(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">To be added.</param>
            <param name="r2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.IntersectsWith(Xamarin.Forms.Rectangle)">
            <param name="r">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.IsEmpty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Left">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Location">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Offset(Xamarin.Forms.Point)">
            <param name="dr">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Offset(System.Double,System.Double)">
            <param name="dx">To be added.</param>
            <param name="dy">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.op_Equality(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">To be added.</param>
            <param name="r2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.op_Inequality(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">To be added.</param>
            <param name="r2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Right">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Round">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Size">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Top">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Union(Xamarin.Forms.Rectangle)">
            <param name="r">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Rectangle.Union(Xamarin.Forms.Rectangle,Xamarin.Forms.Rectangle)">
            <param name="r1">To be added.</param>
            <param name="r2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Width">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.X">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Rectangle.Y">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Rectangle.Zero">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RectangleTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string to a <see cref="T:Xamarin.Forms.Rectangle" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RectangleTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RectangleTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RectangleTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RelativeLayout">
            <summary>A <see cref="T:Xamarin.Forms.Layout`1" /> that uses <see cref="T:Xamarin.Forms.Constraint" />s to layout its children.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RelativeLayout">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.BoundsConstraintProperty">
            <summary>Identifies the bindable property associated with <see cref="M:Xamarin.Forms.RelativeLayout.GetBoundsConstraint" />/<see cref="M:Xamarin.Forms.RelativeLayout.SetBoundsConstraint" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.RelativeLayout.Children">
            <summary>List of <see cref="T:Xamarin.Forms.View" />s that are children of this <see cref="T:Xamarin.Forms.RelativeLayout" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetBoundsConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the bounds constraint is being requested.</param>
            <summary>Returns the bounds constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.BoundsConstraint" /> of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetHeightConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the height constraint is being requested.</param>
            <summary>Returns the height constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the height of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetWidthConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the width constraint is being requested.</param>
            <summary>Returns the width constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the width of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetXConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the X constraint is being requested.</param>
            <summary>Returns the X constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the X position of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.GetYConstraint(Xamarin.Forms.BindableObject)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> for which the Y constraint is being requested.</param>
            <summary>Returns the Y constraint of the <paramref name="bindable" />.</summary>
            <returns>The <see cref="T:Xamarin.Forms.Constraint" /> on the Y position of the <paramref name="bindable" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.HeightConstraintProperty">
            <summary>Identifies the bindable property associated with the <see cref="M:Xamarin.Forms.RelativeLayout.GetHeightConstraint" /> / <see cref="M:Xamarin.Forms.RelativeLayout.SetHeightConstraint" /> methods.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">The left-side bound of the rectangle into which the children will be laid out.</param>
            <param name="y">The top bound of the rectangle into which the children will be laid out.</param>
            <param name="width">The width of the rectangle into which the children will be laid out.</param>
            <param name="height">The height of the rectangle into which the children will be laid out.</param>
            <summary>Lays out the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> in the specified rectangle.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnAdded(Xamarin.Forms.View)">
            <param name="view">The <see cref="T:Xamarin.Forms.View" /> added to the <see cref="P:Xamarin.Forms.RelativeLayout.Children" />.</param>
            <summary>Called when a <see cref="T:Xamarin.Forms.View" /> is added to the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnRemoved(Xamarin.Forms.View)">
            <param name="view">The <see cref="T:Xamarin.Forms.View" /> removed from the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</param>
            <summary>Called when a <see cref="T:Xamarin.Forms.View" /> is removed from the <see cref="P:Xamarin.Forms.RelativeLayout.Children" /> collection.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>Called when this <see cref="T:Xamarin.Forms.RelativeLayout" /> has received a size request.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.SetBoundsConstraint(Xamarin.Forms.BindableObject,Xamarin.Forms.BoundsConstraint)">
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> to which the constraint will be applied.</param>
            <param name="value">The <see cref="T:Xamarin.Forms.BoundsConstraint" /> on the <paramref name="bindable" />.</param>
            <summary>Sets <paramref name="value" /> as a constraint on the bounds of <paramref name="bindable" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.WidthConstraintProperty">
            <summary>Identifies the width constraint.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.XConstraintProperty">
            <summary>Identifies the constraint on X.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RelativeLayout.YConstraintProperty">
            <summary>Identifies the constraint on Y.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RelativeLayout.IRelativeList`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xamarin.Forms.View" />s used by a <see cref="T:Xamarin.Forms.RelativeLayout" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,System.Linq.Expressions.Expression{System.Func{Xamarin.Forms.Rectangle}})">
            <param name="view">To be added.</param>
            <param name="bounds">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}},System.Linq.Expressions.Expression{System.Func{System.Double}})">
            <param name="view">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.RelativeLayout.IRelativeList`1.Add(T,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint,Xamarin.Forms.Constraint)">
            <param name="view">To be added.</param>
            <param name="xConstraint">To be added.</param>
            <param name="yConstraint">To be added.</param>
            <param name="widthConstraint">To be added.</param>
            <param name="heightConstraint">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ResourceDictionary">
            <summary>An IDictionary that maps identifier strings to arbitrary resource objects.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ResourceDictionary">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`1" /> to be added.</param>
            <summary>Adds the specified <see cref="T:Xamarin.Forms.System.Collections.Generic.KeyValuePair`1" /> to the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Add(System.String,System.Object)">
            <param name="key">The identifier to be used to retrieve the <paramref name="value" />.</param>
            <param name="value">The <see cref="T:System.Object" /> associated with the <paramref name="key" />.</param>
            <summary>Adds <paramref name="key" /> and <paramref name="value" /> to the <see cref="T:Xamarin.Forms.ResourceDictionary" /> as a key-value pair.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Clear">
            <summary>Empties the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`1" /> being searched for.</param>
            <summary>Whether the <see cref="T:Xamarin.Forms.ResourceDictionary" /> contains the specified <see cref="T:System.Collections.Generic.KeyValuePair`1" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.ContainsKey(System.String)">
            <param name="key">The identifier being searched for.</param>
            <summary>Whether the <see cref="T:Xamarin.Forms.ResourceDictionary" /> contains a key-value pair identified by <paramref name="key" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <param name="array">The array into which the <see cref="T:System.Collections.Generic.KeyValuePair`1" />s are to be copied.</param>
            <param name="arrayIndex">The starting index at which copying should begin.</param>
            <summary>Copies the <see cref="T:System.Collections.Generic.KeyValuePair`1" />s of the <see cref="T:Xamarin.Forms.ResourceDictionary" /> into an array, beginning at the specified <paramref name="arrayIndex" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Count">
            <summary>The number of entries in the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.GetEnumerator">
            <summary>Returns a <see cref="T:System.Collections.Generic.IEnumerator`1" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.IsReadOnly">
            <summary>Whether the <see cref="T:Xamarin.Forms.ResourceDictionary" /> is read-only.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Item(System.String)">
            <param name="index">The identifier of the desired object.</param>
            <summary>Retrieves the <see cref="T:System.Object" /> value associated with the key <paramref name="index" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Keys">
            <summary>The collection of identifier <langword see="string" />s that are keys in the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`1" /> to be removed.</param>
            <summary>Removes the specified <see cref="T:System.Collections.Generic.KeyValuePair`1" /> from the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.Remove(System.String)">
            <param name="key">The identifier of the key-value pair to be removed.</param>
            <summary>Removes the key and value identified by <paramref name="key" /> from the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <returns>
                <see langword="true" /> if the key existed and the removal was successful.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns a <see cref="T:System.Collections.IEnumerator" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> of the <see cref="T:Xamarin.Forms.ResourceDictionary" />'s <see cref="T:System.Collections.Generic.KeyValuePair`1" />s.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ResourceDictionary.TryGetValue(System.String,System.Object@)">
            <param name="key">The identifier of the object to be retrieved.</param>
            <param name="value">An <langword see="out" /> reference to the object being retrieved, or it's default value.</param>
            <summary>Retrieves the object specified by <paramref name="key" /> or, if not present, the default value of <see langword="null" />.</summary>
            <returns>The object specified by <paramref name="key" /> or, if not present, the default value of <see langword="null" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ResourceDictionary.Values">
            <summary>Retrieves the values of the <see cref="T:Xamarin.Forms.ResourceDictionary" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RowDefinition">
            <summary>An <see cref="I:Xamarin.Forms.IDefinition" /> that defines properties for a row in a <see cref="T:Xamarin.Forms.Grid" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RowDefinition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.RowDefinition.Height">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.RowDefinition.HeightProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.RowDefinition.SizeChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.RowDefinitionCollection">
            <summary>A <see cref="T:Xamarin.Forms.DefinitionCollection`1" /> for <see cref="T:Xamarin.Forms.RowDefinition" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.RowDefinitionCollection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ScrollOrientation">
            <summary>Enumeration specifying vertical or horizontal scrolling directions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ScrollOrientation.Horizontal">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ScrollOrientation.Vertical">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.ScrollView">
            <summary>An element capable of scrolling if it's Content requires.</summary>
            <remarks>
                <para>
                    <example language="C#">
              The following example shows the creation of a ScrollView with a large <see cref="T:Xamarin.Forms.StackLayout" /> in it.
              <code lang="C#"><![CDATA[
StackLayout stack;
var scrollview = new ScrollView {
  Content = new StackLayout {
    Padding = new Thickness (20),
  },
};

for (var i=0; i&lt;100; i++)
  stack.Children.Add (new Button { Text = "Foo"});
              ]]></code></example>
                </para>
                <para>It is not recommended to nest ScrollView elements, or other elements with scrolling capabilities, like <see cref="T:Xamarin.Forms.WebView" />.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ScrollView">
            <summary>Initializes a new instance of the ScrollView class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ScrollView.Content">
            <summary>Gets or sets the content of the ScrollView.</summary>
            <value>A <see cref="T:Xamarin.Forms.View" /> used as content.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ScrollView.ContentSize">
            <summary>Gets the size of the Content. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.Size" /> representing the size of the content.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ScrollView.ContentSizeProperty">
            <summary>Identifies the ContentSize bindable property.</summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ScrollView.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the y coordinate of the child region bounding box.</param>
            <param name="height">A value representing the y coordinate of the child region bounding box.</param>
            <summary>Positions and sizes the content of a ScrollView.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ScrollView.Orientation">
            <summary>Gets or sets the scrolling direction of the ScrollView. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.ScrollView.OrientationProperty">
            <summary>Identifies the Orientation bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.SearchBar">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides a search box.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SearchBar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.Placeholder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.PlaceholderProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.SearchBar.SearchButtonPressed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.SearchCommand">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.SearchCommandParameter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.SearchCommandParameterProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.SearchCommandProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SearchBar.Text">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.SearchBar.TextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.SearchBar.TextProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SelectedItemChangedEventArgs">
            <summary>Event arguments for the <see cref="E:Xamarin.Forms.ListView.ItemSelected" /> event.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SelectedItemChangedEventArgs(System.Object)">
            <param name="selectedItem">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SelectedItemChangedEventArgs.SelectedItem">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Size">
            <summary>Struct defining height and width as a pair of doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Size(System.Double,System.Double)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.Equals(Xamarin.Forms.Size)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.Height">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.IsZero">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Addition(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">To be added.</param>
            <param name="s2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Equality(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">To be added.</param>
            <param name="s2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Explicit(Xamarin.Forms.Size)~Xamarin.Forms.Point">
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Inequality(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">To be added.</param>
            <param name="s2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Multiply(Xamarin.Forms.Size,System.Double)">
            <param name="s1">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.op_Subtraction(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="s1">To be added.</param>
            <param name="s2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Size.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Size.Width">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Size.Zero">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SizeRequest">
            <summary>Struct defining minimum and maximum <see cref="T:Xamarin.Forms.Size" />s.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SizeRequest(Xamarin.Forms.Size)">
            <param name="request">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.SizeRequest(Xamarin.Forms.Size,Xamarin.Forms.Size)">
            <param name="request">To be added.</param>
            <param name="minimum">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SizeRequest.Minimum">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.SizeRequest.Request">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Slider">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that inputs a linear value.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Slider">
            <summary>Initializes a new instance of the Slider class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Slider(System.Double,System.Double,System.Double)">
            <param name="min">The minimum selectable value.</param>
            <param name="max">The maximum selectable value.</param>
            <param name="val">The actual value.</param>
            <summary>Initializes a new instance of the Slider class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Maximum">
            <summary>Gets or sets the maximum selectable value for the Slider. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.MaximumProperty">
            <summary>Identifies the Maximum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Minimum">
            <summary>Gets or sets the minimum selectable value for the Slider. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.MinimumProperty">
            <summary>Identifies the Minimum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Slider.Value">
            <summary>Gets or sets the current value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Slider.ValueChanged">
            <summary>The ValueChanged event is fired when the Value property changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Slider.ValueProperty">
            <summary>Identifies the Value bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.StackLayout">
            <summary>A <see cref="T:Xamarin.Forms.Layout`1" /> that positions child elements in a single line which can be oriented vertically or horizontally.</summary>
            <remarks>This layout will set the child bounds automatically during a layout cycle. User assigned bounds will be overwritten and thus should not be set on a child element by the user.</remarks>
        </member>
        <member name="C:Xamarin.Forms.StackLayout">
            <summary>Initializes a new instance of the StackLayout class.</summary>
            <remarks>
                <para>
                    <example lang="C#">
              The following example shows the initialization of a new StackLayout and setting its orientation and children.
              <code lang="C#"><![CDATA[
var stackLayout = new StackLayout {
  Orientation = StackOrientation.Horizontal,
  Children = {
    firstChild,
    secondChild,
    thirdChild
  }
};
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.StackLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">A value representing the x coordinate of the child region bounding box.</param>
            <param name="y">A value representing the y coordinate of the child region bounding box.</param>
            <param name="width">A value representing the width of the child region bounding box.</param>
            <param name="height">A value representing the height of the child region bounding box.</param>
            <summary>Positions and sizes the children of a StackLayout.</summary>
            <remarks>Implementors wishing to change the default behavior of a StackLayout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
        </member>
        <member name="M:Xamarin.Forms.StackLayout.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the StackLayout to use.</param>
            <param name="heightConstraint">The available height for the StackLayout to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of the StackLayout.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the StackLayout.</returns>
            <remarks>The results of this method will be a sum of all the desired sizes of its children along the orientation axis, and the maximum along the non-orientation axis.</remarks>
        </member>
        <member name="P:Xamarin.Forms.StackLayout.Orientation">
            <summary>Gets or sets the value which indicates the direction which child elements are positioned.</summary>
            <value>A <see cref="T:Xamarin.Forms.StackOrientation" /> which indicates the direction children layouts flow. The default value is Vertical.</value>
            <remarks>Setting the Orientation of a StackLayout triggers a layout cycle if the stack is already inside of a parent layout. To prevent wasted layout cycles, set the orientation prior to adding the StackLayout to a parent.</remarks>
        </member>
        <member name="F:Xamarin.Forms.StackLayout.OrientationProperty">
            <summary>Identifies the Orientation bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.StackLayout.Spacing">
            <summary>Gets or sets a value which indicates the amount of space between each child element.</summary>
            <value>A value in device pixels which indicates the amount of space between each element. The default value is 6.0.</value>
            <remarks>
                <para>
            Setting this value triggers a layout cycle if the StackLayout is already in a parent Layout.
          </para>
                <para>
                    <example lang="C#">
              The following example sets the Spacing on construction of a StackLayout.
              <code lang="C#"><![CDATA[
var stackLayout = new StackLayout {
  Spacing = 10
};
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.StackLayout.SpacingProperty">
            <summary>Identifies the Spacing bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.StackOrientation">
            <summary>The orientations the a StackLayout can have.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.StackOrientation.Horizontal">
            <summary>StackLayout should be horizontally oriented.</summary>
        </member>
        <member name="F:Xamarin.Forms.StackOrientation.Vertical">
            <summary>StackLayout should be vertically oriented.</summary>
        </member>
        <member name="T:Xamarin.Forms.Stepper">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that inputs a discrete value, constrained to a range.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Stepper">
            <summary>Initializes a new instance of the Stepper class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.Stepper(System.Double,System.Double,System.Double,System.Double)">
            <param name="min">The minimum selectable value.</param>
            <param name="max">The maximum selectable value.</param>
            <param name="val">The current selected value.</param>
            <param name="increment">The increment by which Value is increased or decreased.</param>
            <summary>Initializes a new instance of the Stepper class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Stepper.Increment">
            <summary>Gets or sets the increment by which Value is increased or decreased. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Stepper.IncrementProperty">
            <summary>Identifies the Increment bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Stepper.Maximum">
            <summary>Gets or sets the maximum selectable value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Stepper.MaximumProperty">
            <summary>Identifies the Maximum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Stepper.Minimum">
            <summary>Gets or sets the minimum selectabel value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Stepper.MinimumProperty">
            <summary>Identifies the Minimum bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.Stepper.Value">
            <summary>Gets or sets the current value. This is a bindable property.</summary>
            <value>A double.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.Stepper.ValueChanged">
            <summary>The ValueChanged event is fired when the Value has changed.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.Stepper.ValueProperty">
            <summary>Identifies the Value bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.StreamImageSource">
            <summary>
                <see cref="T:Xamarin.Forms.ImageSource" /> that loads an image from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.StreamImageSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.StreamImageSource.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.StreamImageSource.Stream">
            <summary>Gets or sets the delegate responsible for returning a <see cref="T:System.IO.Stream" /> for the Image.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.StreamImageSource.StreamProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Switch">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides a toggled value.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Switch">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Switch.IsToggled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Switch.IsToggledProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.Switch.Toggled">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.SwitchCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> with a label and an on/off switch.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.SwitchCell">
            <summary>Initializes a new instance of the SwitchCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.SwitchCell.On">
            <summary>Gets or sets the state of the switch. This is a bindable property.</summary>
            <value>Default is <see langword="false" />.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.SwitchCell.OnChanged">
            <summary>Triggered when the switch has changed value.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.SwitchCell.OnProperty">
            <summary>Identifies the On bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.SwitchCell.Text">
            <summary>Gets or sets the text displayed next to the switch. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.SwitchCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TabbedPage">
            <summary>
                <see cref="T:Xamarin.Forms.Page" /> that allows navigation between children pages, using tabs.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TabbedPage">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TabbedPage.CreateDefault(System.Object)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TabbedPage.OnParentSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableIntent">
            <summary>TableIntent provides hints to the renderer about how a table will be used.</summary>
            <remarks>Using table intents will not effect the behavior of a table, and will only modify their visual appearance on screen, depending on the platform. Not all intents are unique on all platforms, however it is advisable to pick the intent which most closely represents your use case.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Data">
            <summary>A table intended to contain an arbitrary number of similar data entries.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Form">
            <summary>A table which is used to contain information that would normally be contained in a form.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Menu">
            <summary>A table intended to be used as a menu for selections.</summary>
        </member>
        <member name="F:Xamarin.Forms.TableIntent.Settings">
            <summary>A table containing a set of switches, toggles, or other modifiable configuration settings.</summary>
        </member>
        <member name="T:Xamarin.Forms.TableRoot">
            <summary>A <see cref="T:Xamarin.Forms.TableSection" /> that contains either a table section or the entire table.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TableRoot">
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.TableRoot" /> class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TableRoot(System.String)">
            <param name="title">The title of the table.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.TableRoot" /> class with a title.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TableSection">
            <summary>A logical and visible section of a <see cref="T:Xamarin.Forms.TableView" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSection(System.String)">
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableSectionBase">
            <summary>Abstract base class defining a table section.</summary>
            <remarks>
                <para>
                    <img href="TableSectionBase.Hierarchy.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase(System.String)">
            <param name="title">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase.Title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableSectionBase.TitleProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableSectionBase`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>
            Table section contain instances of type T that are rendered by Xamarin.Forms.</summary>
            <remarks>
                <para>
            Sections are used to group cells in the screen and they are the
            only valid direct child of the <see cref="T:Xamarin.Forms.TableRoot" />.    Sections can contain
            any of the standard <see cref="T:Xamarin.Forms.Cell" />s, including new <see cref="T:Xamarin.Forms.TableRoot" />s.
            </para>
                <para>
                    <see cref="T:Xamarin.Forms.TableRoot" />s embedded in a section are used to navigate to a new
            deeper level.
            </para>
                <para>
            You can assign a header and a footer either as strings (Header and Footer)
            properties, or as Views to be shown (HeaderView and FooterView).   Internally
            this uses the same storage, so you can only show one or the other.
      </para>
                <para>Subtypes of <see cref="T:Xamarin.Forms.TableSectionBase`1" /> are <see cref="T:Xamarin.Forms.TableSection" /> and <see cref="T:Xamarin.Forms.TableRoot" />, as shown in the following diagram:</para>
                <para>
                    <img href="TableSection.Hierarchy.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase`1">
            <summary>
            Constructs a Section without an empty header.
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableSectionBase`1(System.String)">
            <param name="title">To be added.</param>
            <summary>
            Constructs a Section with the specified header.
            </summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Add(System.Collections.Generic.IEnumerable{T})">
            <param name="items">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Add(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Forms.TableSectionBase`1.CollectionChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Contains(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.CopyTo(T[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.IndexOf(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Insert(System.Int32,T)">
            <param name="index">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.OnBindingContextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.Remove(T)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.RemoveAt(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableSectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableSectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TableView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that holds rows of <see cref="T:Xamarin.Forms.Cell" />s.</summary>
            <remarks>
                <para>A <see cref="T:Xamarin.Forms.TableView" /> has a <see cref="T:Xamarin.Forms.TableRoot" /> as its <see cref="P:Xamarin.Forms.TableView.Root" /> property. The <see cref="T:Xamarin.Forms.TableView.TableRoot" /> is a type of <see cref="T:Xamarin.Forms.TableSection" />. </para>
                <para>The following example shows a basic table with two sections.</para>
                <example>
                    <code lang="C#"><![CDATA[
return new ContentPage {
	Content = new TableView {
		Intent = TableIntent.Form,
		Root = new TableRoot ("Table Title") {
			new TableSection ("Section 1 Title") {
				new TextCell {
					Text = "TextCell Text",
					Detail = "TextCell Detail"
				},
				new EntryCell {
					Label = "EntryCell:",
					Placeholder = "default keyboard",
					Keyboard = Keyboard.Default
				}
			},
			new TableSection ("Section 2 Title") {
				new EntryCell {
					Label = "Another EntryCell:",
					Placeholder = "phone keyboard",
					Keyboard = Keyboard.Telephone
				},
				new SwitchCell {
					Text = "SwitchCell:"
				}
			}
		}
	}
};          
          ]]></code>
                </example>
                <para>The resulting table looks like this as a native iOS table:</para>
                <para>
                    <img href="TableView.Sections.iOS.png" />
                </para>
                <para>And like this as a native Android table:</para>
                <para>
                    <img href="TableView.Sections.Android.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TableView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TableView(Xamarin.Forms.TableRoot)">
            <param name="root">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.HasUnevenRows">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableView.HasUnevenRowsProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.Intent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableView.OnBindingContextChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TableView.OnModelChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.Root">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TableView.RowHeight">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TableView.RowHeightProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TapGestureRecognizer">
            <summary>Provides tap gesture recognition and events.</summary>
            <remarks>Can be used to recognize single and multiple tap gestures.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer">
            <summary>Initializes a new instance of a TapGestureRecognizer object.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer(System.Action{Xamarin.Forms.View,System.Object})">
            <param name="tappedCallback">An action whose first argument is the View the recognizer is associated with and whose second argument is the callback parameter.</param>
            <summary>Initializes a new instance of a TapGestureRecognizer object with a parameterized callback.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TapGestureRecognizer(System.Action{Xamarin.Forms.View})">
            <param name="tappedCallback">An action whose first argument is the View the recognizer is associated with.</param>
            <summary>Initializes a new instance of a TapGestureRecognizer object with a callback.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequired">
            <summary>The number of taps required to trigger the callback. This is a bindable property.</summary>
            <value>The number of taps to recognize. The default value is 1.</value>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.NumberOfTapsRequiredProperty">
            <summary>Identifies the NumberOfTapsRequired bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.TappedCallback">
            <summary>The action to invoke when the gesture has been triggered by the user. This is a bindable property.</summary>
            <value>An action that will be invoked.</value>
            <remarks>The object passed to the callback will be the contents of <see cref="P:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameter" />.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameter">
            <summary>An object to be passed to the TappedCallback. This is a bindable property.</summary>
            <value>An object.</value>
            <remarks>The primary use case for this property is Xaml bindings.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.TappedCallbackParameterProperty">
            <summary>Identifies the TappedCallbackParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TapGestureRecognizer.TappedCallbackProperty">
            <summary>Identifies the TappedCallback bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TargetIdiom">
            <summary>Indicates the type of device Forms is working on.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Desktop">
            <summary>(Unused) Indicates that Forms is running on a computer.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Phone">
            <summary>Indicates that Forms is running on a Phone, or a device similar in shape and capabilities.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Tablet">
            <summary>Indicates that Forms is running on a Tablet.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetIdiom.Unsupported">
            <summary>(Unused) Indicates that Forms is running on an unsupported device.</summary>
        </member>
        <member name="T:Xamarin.Forms.TargetPlatform">
            <summary>Indicates the kind of OS Forms is currently working on.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.Android">
            <summary>Indicates that Forms is running on a Google Android OS.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.iOS">
            <summary>Indicates that Forms is running on an Apple iOS OS.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.Other">
            <summary>(Unused) Indicates that Forms is running on an undefined platform.</summary>
        </member>
        <member name="F:Xamarin.Forms.TargetPlatform.WinPhone">
            <summary>Indicates that Forms is running on a Microsoft WinPhone OS.</summary>
        </member>
        <member name="T:Xamarin.Forms.TemplateExtensions">
            <summary>Extension class for DataTemplate, providing a string-based shortcut method for defining a Binding.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TemplateExtensions.SetBinding(Xamarin.Forms.DataTemplate,Xamarin.Forms.BindableProperty,System.String)">
            <param name="self">To be added.</param>
            <param name="targetProperty">To be added.</param>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TextAlignment">
            <summary>Represents vertical and horizontal text alignement.</summary>
            <remarks>This affects the way the text is diaplayed inside of its control bounds.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.Center">
            <summary>Center-aligned text.</summary>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.End">
            <summary>End-flushed text. It means right-aligned (resp: bottom-aligned) for horizontal (resp vertical) alignemnt.</summary>
        </member>
        <member name="F:Xamarin.Forms.TextAlignment.Start">
            <summary>Start-flushed text. It means left-aligned (resp: top-aligned) for horizontal (resp vertical) alignemnt.</summary>
        </member>
        <member name="T:Xamarin.Forms.TextCell">
            <summary>
              A <see cref="T:Xamarin.Forms.Cell" /> with primary <see cref="P:Xamarin.Forms.TextCell.Text" />  and <see cref="P:Xamarin.Forms.TextCell.Detail" /> text.
            </summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.TextCell">
            <summary>Initializes a new instance of the TextCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.Command">
            <summary>Gets or sets the ICommand to be executed when the TextCell is tapped. This is a bindable property.</summary>
            <value />
            <remarks>Setting the Command property has a side effect of changing the Enabled property depending on ICommand.CanExecute.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextCell.CommandParameter">
            <summary>Gets or sets the parameter passed when invoking the Command. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.CommandParameterProperty">
            <summary>Identifies the CommandParameter bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.CommandProperty">
            <summary>Identifies the Command bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.Detail">
            <summary>Gets or sets the secondary text to be displayed in the TextCell. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.DetailColor">
            <summary>Gets or sets the color to render the secondary text. This is a bindable property.</summary>
            <value>The color of the text. Color.Default is the default color value.</value>
            <remarks>Not all platforms may support transparent text rendering. Using Color.Default will result in the system theme color being used.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextCell.DetailColorProperty">
            <summary>Identifies the DetailColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.DetailProperty">
            <summary>Gets or sets the secondary text to be displayed. This is a bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.TextCell.OnTapped">
            <summary>Invoked whenever the Cell is Tapped.</summary>
            <remarks>Overriden for TextCell.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextCell.Style">
            <summary>Gets or sets the TextCellStyle. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.StyleProperty">
            <summary>Identifies the Style bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.Text">
            <summary>Gets or sets the primary text to be displayed. This is a bindable property.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TextCell.TextColor">
            <summary>Gets or sets the color to render the primary text. This is a bindable property.</summary>
            <value>The color of the text.</value>
            <remarks>Not all platforms may support transparent text rendering. Using Color.Default will result in the system theme color being used. Color.Default is the default color value.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextCell.TextColorProperty">
            <summary>Identifies the TextColor bindable property.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Forms.TextCell.TextProperty">
            <summary>Identifies the Text bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.TextCellStyle">
            <summary>Enumeration defining vertical and horizontal styles for a <see cref="T:Xamarin.Forms.TextCell" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TextCellStyle.Horizontal">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.TextCellStyle.Vertical">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.TextChangedEventArgs">
            <summary>Event arguments for <c>TextChanged</c> events. Provides old and new text values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TextChangedEventArgs(System.String,System.String)">
            <param name="oldTextValue">To be added.</param>
            <param name="newTextValue">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextChangedEventArgs.NewTextValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TextChangedEventArgs.OldTextValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Thickness">
            <summary>Struct defining horizontal and vertical thickness using doubles.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double)">
            <param name="uniformSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double,System.Double)">
            <param name="horizontalSize">To be added.</param>
            <param name="verticalSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Thickness(System.Double,System.Double,System.Double,System.Double)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Bottom">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.HorizontalThickness">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Left">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Equality(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Implicit(System.Double)~Xamarin.Forms.Thickness">
            <param name="uniformSize">The value for the uniform Thickness.</param>
            <summary>Implicit cast operator from <see cref="T:System.Double" />.</summary>
            <returns>A Thickness with an uniform size..</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Implicit(Xamarin.Forms.Size)~Xamarin.Forms.Thickness">
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Thickness.op_Inequality(Xamarin.Forms.Thickness,Xamarin.Forms.Thickness)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Right">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.Top">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Thickness.VerticalThickness">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ThicknessTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string to a <see cref="T:Xamarin.Forms.Thickness" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ThicknessTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ThicknessTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ThicknessTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TimePicker">
            <summary>A <see cref="T:Xamarin.Forms.View" /> control that provides time picking.</summary>
            <remarks>The visual representation of a TimePicker is very similar to the one of <see cref="T:Xamarin.Forms.Entry" />, except that a special control for picking a time appears in place of a keyboard.
<para><example lang="C#">
    The following example shows declaration of a TimePicker with a default time set.
    <code lang="C#"><![CDATA[
var beeroclock = new TimePicker () { Time = new TimeSpan (17,0,0) };
    ]]></code></example></para></remarks>
        </member>
        <member name="C:Xamarin.Forms.TimePicker">
            <summary>Initializes a new TimePicker instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TimePicker.Format">
            <summary>The format of the time to display to the user. This is a bindable property.</summary>
            <value>A valid time format string.</value>
            <remarks>Format string is the same is passed to DateTime.ToString (string format).</remarks>
        </member>
        <member name="F:Xamarin.Forms.TimePicker.FormatProperty">
            <summary>Identifies the Format bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.TimePicker.Time">
            <summary>Gets or sets the displayed time. This is a bindable property.</summary>
            <value>The <see cref="T:System.TimeSpan" /> displayed in the TimePicker.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TimePicker.TimeProperty">
            <summary>Identifies the Time bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ToggledEventArgs">
            <summary>Event arguments for <see cref="E:Xamarin.Forms.Switch.Toggled" /> and <see cref="E:Xamarin.Forms.SwitchCell.OnChanged" /> events.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ToggledEventArgs(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToggledEventArgs.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ToolbarItem">
            <summary>An item in a toolbar or displayed on a <see cref="T:Xamarin.Forms.Page" />.</summary>
            <remarks>
                <para>Any changes made to the properties of the toolbar item after it has been added will be ignored.</para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.ToolbarItem">
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ToolbarItem" /> class.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ToolbarItem(System.String,System.String,System.Action,Xamarin.Forms.ToolbarItemOrder,System.Int32)">
            <param name="name">To be added.</param>
            <param name="icon">To be added.</param>
            <param name="activated">To be added.</param>
            <param name="order">To be added.</param>
            <param name="priority">To be added.</param>
            <summary>Constructs and initializes a new instance of the <see cref="T:Xamarin.Forms.ToolbarItem" /> class.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Forms.ToolbarItem.Activated">
            <summary>Raised when the <see cref="T:Xamarin.Forms.ToolbarItem" /> is touched or clicked.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Command">
            <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> to be invoked on activation.</summary>
            <value>The <see cref="T:System.Windows.Input.ICommand" /> to be invoked on activation.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.CommandParameter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItem.CommandParameterProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItem.CommandProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Icon">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Name">
            <summary>Gets or sets the name of the <see cref="T:Xamarin.Forms.ToolbarItem" />.</summary>
            <value>The name of the toolbar item..</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Order">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ToolbarItem.Priority">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ToolbarItemOrder">
            <summary>Enumeration specifying whether the <see cref="T:Xamarin.Forms.ToolbarItem" /> appears on the primary toolbar surface or secondary.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Primary">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ToolbarItemOrder.Secondary">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.TypeConverter">
            <summary>Abstract base class whose subclasses can convert values between different types.</summary>
            <remarks>
                <para>The following diagram shows subclasses of <see cref="T:Xamarin.Forms.TypeConverter" />.</para>
                <para>
                    <img href="TypeConverter.Hierarchy.png" />
                </para>
            </remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.ConvertFrom(System.Object)">
            <param name="o">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.TypeConverterAttribute">
            <summary>Attribute that specifies the type of <see cref="T:Xamarin.Forms.TypeConverter" /> used by its target.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute(System.String)">
            <param name="typeName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.TypeConverterAttribute(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.TypeConverterAttribute.ConverterTypeName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.TypeConverterAttribute.Default">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverterAttribute.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.TypeConverterAttribute.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UnsolvableConstraintsException">
            <summary>Exception indicating that the <see cref="T:Xamarin.Forms.Constraint" />s specified cannot be simultaneously satisfied.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UnsolvableConstraintsException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UriImageSource">
            <summary>An ImageSource that loads an image from a URI, caching the result.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UriImageSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.CacheValidity">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.CachingEnabled">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UriImageSource.Uri">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.UriImageSource.UriProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UriTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts from a string or <see cref="T:System.Uri" /> to a <see cref="T:System.Uri" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UriTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.UriTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.UriTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.UrlWebViewSource">
            <summary>A WebViewSource bound to a URL.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.UrlWebViewSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.UrlWebViewSource.Url">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.UrlWebViewSource.UrlProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ValueChangedEventArgs">
            <summary>Event arguments for <c>ValueChanged</c> events. Provides both old and new values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.ValueChangedEventArgs(System.Double,System.Double)">
            <param name="oldValue">To be added.</param>
            <param name="newValue">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ValueChangedEventArgs.NewValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.ValueChangedEventArgs.OldValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Vec2">
            <summary>Struct defining X and Y double values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.Vec2(System.Double,System.Double)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Vec2.X">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.Vec2.Y">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.View">
            <summary>A visual element used to place controls on screen.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.View">
            <summary>Initializes a new instance of the View class.</summary>
            <remarks>It is unlikely that an application developer would want to create a new View instance on their own.</remarks>
        </member>
        <member name="P:Xamarin.Forms.View.GestureRecognizers">
            <summary>The collection of gesture recognizers associated with this view.</summary>
            <value>A List of <see cref="T:Xamarin.Forms.IGestureRecognizer" />.</value>
            <remarks>
                <para>
            Adding items to this collection will associate gesture events with this element. This is not nessesary for elements which natively support input, such as a Button.
          </para>
                <para>
                    <example lang="C#">
              This example creates a tap gesture recognizer and associates it with an image. When the image is double tapped, it will become semi-transparent.
              <code lang="C#"><![CDATA[
  var image = new Image {Source = "image.png"};
  var gestureRecognizer = new TapGestureRecognizer {
    TappedCallback = o =&gt; image.Opacity = 0.5,
    NumberOfTapsRequired = 2
  };
  image.GestureRecognizers.Add (gestureRecognizer);
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.View.HorizontalOptions">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions" /> that define how the element gets laid in a layout cycle. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.LayoutOptions" /> which defines how to lay out the element. Default value is <see cref="F:Xamarin.Forms.LayoutOptions.Fill" /> unless otherwise documented.</value>
            <remarks>
                <para>
            Assigning the HorizontalOptions modifies how the element is laid out when there is excess space available along the X axis from the parent layout. Additionally it specifies if the element should consume leftover space in the X axis from the parent layout. If multiple children of a layout are set to expand, the extra space is distributed proportionally.
          </para>
                <para>
                    <example lang="C#">
              This example creates four views and adds them to a stack, each laying out in a different manner.
              <code lang="C#"><![CDATA[
  private View CreateButtons ()
  {
    var button1 = new Button {Text = "LeftAligned", HorizontalOptions=LayoutOptions.Start};
    var button2 = new Button {Text = "CenterAligned", HorizontalOptions=LayoutOptions.Center};
    var button3 = new Button {Text = "EndAligned", HorizontalOptions=LayoutOptions.End};
    var button4 = new Button {Text = "Fill", HorizontalOptions=LayoutOptions.Fill};

    StackLayout stack = new StackLayout {
      Children = {
        button1,
        button2,
        button3,
        button4
      }
    };

    return stack;
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.View.HorizontalOptionsProperty">
            <summary>Identifies the HorizontalOptions bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.View.OnBindingContextChanged">
            <summary>Invoked whenever the binding context of the <see cref="T:Xamarin.Forms.View" /> changes. Override this method to add class handling for this event.</summary>
            <remarks>
                <para>Overriders must call the base method.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.View.VerticalOptions">
            <summary>Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions" /> that define how the element gets laid in a layout cycle. This is a bindable property.</summary>
            <value>A <see cref="T:Xamarin.Forms.LayoutOptions" /> which defines how to lay out the element. Default value is <see cref="F:Xamarin.Forms.LayoutOptions.Fill" /> unless otherwise documented.</value>
            <remarks>
                <para>
            Assigning the VerticalOptions modifies how the element is laid out when there is excess space available along the Y axis from the parent layout. Additionally it specifies if the element should consume leftover space in the Y axis from the parent layout. If multiple children of a layout are set to expand, the extra space is distributed proportionally.
          </para>
                <para>
                    <example lang="C#">
              This example creates four views and adds them to a stack, each laying out in a different manner.
              <code lang="C#"><![CDATA[
  private View CreateButtons ()
  {
    var button1 = new Button {Text = "TopAligned", VerticalOptions=LayoutOptions.Start};
    var button2 = new Button {Text = "CenterAligned", VerticalOptions=LayoutOptions.Center};
    var button3 = new Button {Text = "BottomAligned", VerticalOptions=LayoutOptions.End};
    var button4 = new Button {Text = "Fill", VerticalOptions=LayoutOptions.Fill};

    StackLayout stack = new StackLayout {
      Orientation = StackOrientation.Horizontal,
      Children = {
        button1,
        button2,
        button3,
        button4
      }
    };

    return stack;
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.View.VerticalOptionsProperty">
            <summary>Identifies the VerticalOptions bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ViewCell">
            <summary>A <see cref="T:Xamarin.Forms.Cell" /> containing a developer-defined <see cref="T:Xamarin.Forms.View" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Forms.ViewCell">
            <summary>Initializes a new instance of the ViewCell class.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.ViewCell.View">
            <summary>Gets or sets the View representing the content of the ViewCell.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.ViewExtensions">
            <summary>Extension methods for <see cref="T:Xamarin.Forms.View" />s, providing animatable scaling, rotation, and layout functions.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.CancelAnimations(Xamarin.Forms.VisualElement)">
            <param name="view">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.FadeTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="opacity">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.LayoutTo(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="bounds">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RelRotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="drotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RelScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="dscale">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.RotateYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="rotation">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.ViewExtensions.ScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)">
            <param name="view">To be added.</param>
            <param name="scale">To be added.</param>
            <param name="length">To be added.</param>
            <param name="easing">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.ViewState">
            <summary>Enumeration specifying press-states of a <see cref="T:Xamarin.Forms.View" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Prelight">
            <summary>To be added.</summary>
        </member>
        <member name="F:Xamarin.Forms.ViewState.Pressed">
            <summary>To be added.</summary>
        </member>
        <member name="T:Xamarin.Forms.VisualElement">
            <summary>A <see cref="T:Xamarin.Forms.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.</summary>
            <remarks>
                <para>The base class for most Xamarin.Forms on-screen elements. Provides most properties, events, and methods for presenting an item on screen.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.AnchorX">
            <summary>Gets or sets the X component of the center point for any transform, relative to the bounds of the element. This is a bindable property.</summary>
            <value>The value that declares the X component of the transform. The default value is 0.5.</value>
            <remarks>To be added.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.AnchorY" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.AnchorXProperty">
            <summary>Identifies the AnchorX bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.AnchorY">
            <summary>Gets or sets the Y component of the center point for any transform, relative to the bounds of the element. This is a bindable property.</summary>
            <value>The value that declares the Y component of the transform. The default value is 0.5.</value>
            <remarks>To be added.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.AnchorX" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.AnchorYProperty">
            <summary>Identifies the AnchorY bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.BackgroundColor">
            <summary>Gets or sets the color which will fill the background of a VisualElement. This is a bindable property.</summary>
            <value>The color that is used to fill the background of a VisualElement. The default is <see cref="P:Xamarin.Forms.Color.Default" />.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.BackgroundColorProperty">
            <summary>Identifies the BackgroundColor bindable property.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.BatchBegin">
            <summary>Signals the start of a batch of changes to the elements properties.</summary>
            <remarks>Application authors will not generally need to batch updates manually as the animation framework will do this for them.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.BatchCommit">
            <summary>Signals the end of a batch of commands to the element and that those commands should now be committed.</summary>
            <remarks>This method merely ensures that updates sent during the batch have been committed. It does not ensure that they were not committed before calling this.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Bounds">
            <summary>Gets the bounds of the element.</summary>
            <value>The bounds of an element, in device-independent units.</value>
            <remarks>Bounds is assigned during the Layout cycle by a call to <see cref="M:Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle)" />.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.WidthRequest" />
            <altmember cref="P:Xamarin.Forms.VisualElement.HeightRequest" />
        </member>
        <member name="E:Xamarin.Forms.VisualElement.ChildrenReordered">
            <summary>Occurs when the Children of a VisualElement have been re-ordered.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Focus">
            <summary>Attemps to set focus to this element.</summary>
            <returns>
                <see langword="true" /> if the keyboard focus was set to this element; <see langword="false" /> if the call to this method did not force a focus change.</returns>
            <remarks>Element must be able to receive focus for this to work. Calling Focus on offscreen or unrealized elements has undefined behavior.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.Focused">
            <summary>Occurs when the element receives focus.</summary>
            <remarks>Focused event is raised whenever the VisualElement receives focus. This event is not bubbled through the Forms stack and is received directly from the native control. This event is emitted by the IsFocusedProperty setter.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.IsFocused" />
            <altmember cref="M:Xamarin.Forms.VisualElement.Focus()" />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.GetSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width that a parent element can allocated to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <param name="heightConstraint">The available height that a parent element can allocated to a child. Value will be between 0 and double.PositiveInfinity.</param>
            <summary>Returns the <see cref="T:Xamarin.Forms.SizeRequest" /> of the element. Calling this method begins the measure pass of a layout cycle.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains a requested size and a minimum size.</returns>
            <remarks>Calling GetSizeRequest causes a measure pass to occur for the subtree of elements it is called on. It is ideal to only call GetSizeRequest when needed as excessive calls can negatively impact the performance of your app. Overriding GetSizeRequest should only be done if you want to ignore Width/HeightRequest. More likely a subclass would wish to override <see cref="M:Xamarin.Forms.VisualElement.OnSizeRequest (double, double)" />.</remarks>
            <altmember cref="M:Xamarin.Forms.OnSizeRequest (double, double)" />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Height">
            <summary>Gets the current rendered height of this element. This is a read-only bindable property.</summary>
            <value>The renderered height of this element.</value>
            <remarks>The height of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.HeightProperty">
            <summary>Identifies the Height bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.HeightRequest">
            <summary>Gets or sets the desired height override of this element.</summary>
            <value>The height this element desires to be.</value>
            <remarks>HeightRequest does not immediately change the Bounds of a VisualElement, however setting the HeightRequest will change the result of calls to GetSizeRequest, which will in turn modify the final size the element receives during a layout cycle.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.InputTransparent">
            <summary>Gets or sets a value indicating whether this element should be involved in the user interaction cycle. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element should be able to receive input; <see langword="false" /> if element should not receive input and should pass inputs to the element below. Default is true.</value>
            <remarks>Setting InputTransparent is not the same as setting IsEnabled to false. Setting InputTransparent only disables inputs and instead causes them to be passed to the VisualElement below the element. Usually this is the parent of the element.</remarks>
            <altmember cref="P:Xamarin.Forms.VisualElement.IsEnabled" />
        </member>
        <member name="F:Xamarin.Forms.VisualElement.InputTransparentProperty">
            <summary>Identifies the InputTransparent bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.InvalidateMeasure">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsEnabled">
            <summary>Gets or sets a value indicating whether this element is enabled in the user interface. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />. The default value is <see langword="true" /></value>
            <remarks>
                <para>
            Elements that are not enabled do not participate in hit detection, and therefore will not receive focus or emit input events.
          </para>
                <para>
                    <example lang="C#">
              The following example shows a handler on a button which will then set IsEnabled to false on another button.
              <code lang="C#"><![CDATA[
  public partial class ButtonDisableExample {
    void BuildButtons ()
    {
      Button button1 = new Button {Text = "New button"};
      Button button2 = new Button {Text = "Disabled on click"};
      button1.Activated += (o, e) =&gt; button2.IsEnabled = false;
    }
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.IsEnabledProperty">
            <summary>Identifies the InputTransparent bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsFocused">
            <summary>Gets a value indicating whether this element is focused currently. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element is focused; otherwise, <see langword="false" />.</value>
            <remarks>
                <para>
            Applications may have multiple focuses depending on the implementation of the underlying toolkit. Menus and modals in particular may leave multiple items with focus.
          </para>
                <para>
                    <example lang="C#">
              The following example shows conditionally setting a background color based on the focus state.
              <code lang="C#"><![CDATA[
  void UpdateBackground ()
  {
    if (myElement.IsFocused)
      myElement.BackgroundColor = Color.Red;
    else
      myElement.BackgroundColor = Color.Blue;
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.IsVisible">
            <summary>Gets or sets a value that determines whether this elements should be part of the visual tree or not. This is a bindable property.</summary>
            <value>
                <see langword="true" /> if the element should be rendered; otherwise, <see langword="false" />. Default value is <see langword="true" />.</value>
            <remarks>
                <para>Setting IsVisible to false will remove the element from the visual tree. The element will no longer take up space in layouts or be eligle to receive any kind of input event.</para>
                <para>
                    <example lang="C#">
              The following example shows a stack where the middle element is toggled when a button is activated.
              <code lang="C#"><![CDATA[
  partial class LabelToggle {
    Label label;

    void Build ()
    {
      var firstView = new Button {Text = "Tap Me"};
      label = new Label {Text = "I can be toggled"};
      var thirdView = new Image {Source = "image.png"};

      firstView.Activated += OnButtonActivated;

      Content = new StackLayout {
        Children {
          firstView,
          label,
          thirdView
        }
      };
    }

    void OnButtonActivated (object sender, EventArgs args)
    {
      label.IsVisible = !label.IsVisible;
    }
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.IsVisibleProperty">
            <summary>Identifies the IsVisible bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle)">
            <param name="bounds">The new bounds of the element.</param>
            <summary>Updates the bounds of the element during the layout cycle.</summary>
            <remarks>Calling Layout will trigger a layout cycle for the sub-tree of this element.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.MeasureInvalidated">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.MinimumHeightRequest">
            <summary>Gets or sets a value which overrides the minimum height the element will request during layout.</summary>
            <value>The minimum height the element requires. Default value is -1.</value>
            <remarks>
                <para>
            MinimumHeightRequest is used to override the results of a call to <see cref="M:Xamarin.Forms.VisualElement.GetSizeRequest (double, double)" /> by setting the minimum height property. This causes overflow handling to shrink this element to its minimum height before elements who do not have a minimum size set.
          </para>
                <para>
                    <example lang="C#">
              The following example sets the MinimumHeightRequest to enable an image to shrink below it's normal size.
              <code lang="C#"><![CDATA[
  void Build (string veryLongString)
  {
    var label = new Label {Text = veryLongString};
    var image = new Image {Source = "image500x500.png"};

    image.MinimumHeightRequest = 20;
    Content = new StackLayout {
      Children {
        label,
        image
      }
    };
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.MinimumWidthRequest">
            <summary>Gets or sets a value which overrides the minimum width the element will request during layout.</summary>
            <value>The minimum width the element requires. Default value is -1.</value>
            <remarks>
                <para>
            MinimumWidthRequest is used to override the results of a call to <see cref="M:Xamarin.Forms.VisualElement.GetSizeRequest (double, double)" /> by setting the minimum width property. This causes overflow handling to shrink this element to its minimum width before elements who do not have a minimum size set.
          </para>
                <para>
                    <example lang="C#">
              The following example sets the MinimumWidthRequest to enable an image to shrink below it's normal size.
              <code lang="C#"><![CDATA[
  void Build (string veryLongString)
  {
    var label = new Label {Text = veryLongString};
    var image = new Image {Source = "image500x500.png"};

    image.MinimumWidthRequest = 20;
    Content = new StackLayout {
      Orientation = StackOrientation.Horizontal,
      Children {
        label,
        image
      }
    };
  }
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Navigation">
            <summary>Gets the context aware navigation interface for the element.</summary>
            <value>An <see cref="T:Xamarin.Forms.INavigation" /> that allows for navigation using the ancestral navigation implementor.</value>
            <remarks>
                <para>
            Use the Navigation property to perform navigation from any element. If the element has not yet been added to a tree which contains a navigation implementor, the actions are queued up until it is.
          </para>
                <para>
            The following example navigates to a new page created in the callback of a buttons <see cref="E:Xamarin.Forms.VisualElement.Activated" /> event.
            <example lang="C#"><code lang="C#"><![CDATA[
  partial class NavigationTest {
    void BuildContent 
    {
      Button button = new Button {Text = "Tap to Navigate"};
      button.Activated += OnButtonActivated;
    }

    void OnButtonActivated (object sender, EventArgs args)
    {
      Button button = (Button) sender;
      Page newPage = new ContentPage {
        Content = new Label {Text = "Hello New Page"}
      };

      button.Navigation.Push (newPage);
    }
  }
              ]]></code></example></para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.NavigationProperty">
            <summary>Identifies the Navigation bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnChildrenReordered">
            <summary>Invoked whenever the <see cref="E:Xamarin.Forms.VisualElement.ChildrenReordered" /> event is about to be emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnParentSet">
            <summary>Invoked whenever the Parent of an element is set. Implement this method in order to add behavior when the element is added to a parent.</summary>
            <remarks>It is required to call the base implementation.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double,System.Double)">
            <param name="width">The new width of the element.</param>
            <param name="height">The new height of the element.</param>
            <summary>This method is called when the size of the element is set during a layout cycle. This method is called directly before the <see cref="E:Xamarin.Forms.VisualElement.SizeChanged" /> event is emitted. Implement this method to add class handling for this event.</summary>
            <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method. Most layouts will want to implement this method in order to layout their children during a layout cycle.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.OnSizeRequest(System.Double,System.Double)">
            <param name="widthConstraint">The available width for the element to use.</param>
            <param name="heightConstraint">The available height for the element to use.</param>
            <summary>This method is called during the measure pass of a layout cycle to get the desired size of an element.</summary>
            <returns>A <see cref="T:Xamarin.Forms.SizeRequest&gt;" /> which contains the desired size of the element.</returns>
            <remarks>The results of this method will be (-1, -1) if the element has not yet been realized with a platform specific backing control. Overriding this method does not require a call to the base class so long as a valid SizeRequest is returned.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Opacity">
            <summary>Gets or sets the opacity value applied to the element when it is rendered. This is a bindable property.</summary>
            <value>The opacity value. Default opacity is 1.0. Values will be clamped between 0 and 1 on set.</value>
            <remarks>
                <para>
            The opacity value has no effect unless IsVisible is <see langword="true" />. Opacity is inherited down the element hierarchy. If a parent has 0.5 opacity, and a child has 0.5 opacity, the child will render with an effective 0.25 opacity. Setting opacity to 0 has undefined behavior with input elements.
          </para>
                <para>
                    <example lang="C#">
              The following example sets the opacity of a layout to 0.5 and the opacity of one of its children to 0.5, making the child 25% opaque.
              <code lang="C#"><![CDATA[
  StackLayout stack = new StackLayout ();
  Button button1 = new Button {Text="A Button"};
  Button button2 = new Button {Text="Another Button"};

  stack.Children.Add (button1);
  stack.Children.Add (button2);

  // The stack and everything in it will become 50% opaque
  stack.Opacity = 0.5;

  // button1 will become 25% opaque while the stack and button2 remane 50% opaque
  button1.Opacity = 0.5;
              ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.OpacityProperty">
            <summary>Identifies the Opacity bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Resources">
            <summary>Gets or sets the local resource dictionary.</summary>
            <value>The current resource dictionary, where resources are stored by key.</value>
            <remarks>Resource dictionaries are particularly useful in Xaml. [FIXME]</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Rotation">
            <summary>Gets or sets the rotation about the Z-axis (affine rotation) when the element is rendered.</summary>
            <value>The rotation about the Z-axis in degrees.</value>
            <remarks>Rotation is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationProperty">
            <summary>Identifies the Rotation bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.RotationX">
            <summary>Gets or sets the rotation about the X-axis (perspective rotation) when the element is rendered.</summary>
            <value>The rotation about the X-axis in degrees.</value>
            <remarks>RotationX is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationXProperty">
            <summary>Identifies the RotationX bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.RotationY">
            <summary>Gets or sets the rotation about the Y-axis (perspective rotation) when the element is rendered.</summary>
            <value>The rotation about the Y-axis in degrees.</value>
            <remarks>RotationY is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.RotationYProperty">
            <summary>Identifies the RotationY bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Scale">
            <summary>Gets or sets the scale factor applied to the element.</summary>
            <value>The scale factor of the element. Default value is 1.0.</value>
            <remarks>Scale is applied relative to <see cref="P:Xamarin.Forms.VisualElement.AnchorX" /> and <see cref="P:Xamarin.Forms.VisualElement.AnchorY" />.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.ScaleProperty">
            <summary>Identifies the Scale bindable property.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Forms.VisualElement.SizeAllocated(System.Double,System.Double)">
            <param name="width">The newly allocated width.</param>
            <param name="height">The newly allocated height.</param>
            <summary>SizeAllocated is called during a layout cycle to signal the start of a sub-tree layout.</summary>
            <remarks>Calling SizeAllocated will start a new layout cycle on the children of the element. Excessive calls to SizeAllocated may cause performance problems.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.SizeChanged">
            <summary>Occurs when either the Width or the Height properties change value on this element.</summary>
            <remarks>Classes should implement <see cref="M:Xamarin.Forms.VisualElement.OnSizeAllocated (double, double)" /> if they wish to respond to size change events directly.</remarks>
        </member>
        <member name="M:Xamarin.Forms.VisualElement.Unfocus">
            <summary>Unsets focus to this element.</summary>
            <remarks>Element must already have focus for this to have any effect.</remarks>
        </member>
        <member name="E:Xamarin.Forms.VisualElement.Unfocused">
            <summary>Occurs when the element loses focus.</summary>
            <remarks>Unfocused event is raised whenever the VisualElement loses focus. This event is not bubbled through the Forms stack and is received directly from the native control. This event is emitted by the IsFocusedProperty setter.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Width">
            <summary>Gets the current rendered width of this element. This is a read-only bindable property.</summary>
            <value>The renderered width of this element.</value>
            <remarks>The width of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.WidthProperty">
            <summary>Identifies the Width bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.WidthRequest">
            <summary>Gets or sets the desired width override of this element.</summary>
            <value>The width this element desires to be.</value>
            <remarks>WidthRequest does not immediately change the Bounds of a VisualElement, however setting the WidthRequest will change the result of calls to GetSizeRequest, which will in turn modify the final size the element receives during a layout cycle.</remarks>
        </member>
        <member name="P:Xamarin.Forms.VisualElement.X">
            <summary>Gets the current X position of this element. This is a read-only bindable property.</summary>
            <value>The X position of this element relative to its parents bounds.</value>
            <remarks>The x value of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.XProperty">
            <summary>Identifies the X bindable property.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Forms.VisualElement.Y">
            <summary>Gets the current Y position of this element. This is a read-only bindable property.</summary>
            <value>The Y position of this element relative to its parents bounds.</value>
            <remarks>The y value of an element is set during the Layout phase.</remarks>
        </member>
        <member name="F:Xamarin.Forms.VisualElement.YProperty">
            <summary>Identifies the Y bindable property.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.WebView">
            <summary>A <see cref="T:Xamarin.Forms.View" /> that presents HTML content.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebView">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.OnPropertyChanged(System.String)">
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebView.OnSourceChanged(System.Object,System.EventArgs)">
            <param name="sender">To be added.</param>
            <param name="e">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.WebView.Source">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Forms.WebView.SourceProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebViewSource">
            <summary>Abstract class whose subclasses provide the data for a <see cref="T:Xamarin.Forms.WebView" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebViewSource">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.OnSourceChanged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.op_Implicit(System.String)~Xamarin.Forms.WebViewSource">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSource.op_Implicit(System.Uri)~Xamarin.Forms.WebViewSource">
            <param name="url">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.WebViewSourceTypeConverter">
            <summary>A <see cref="T:Xamarin.Forms.TypeConverter" /> that converts a string to a <see cref="T:Xamarin.Forms.UrlWebViewSource" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Forms.WebViewSourceTypeConverter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSourceTypeConverter.CanConvertFrom(System.Type)">
            <param name="sourceType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.WebViewSourceTypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <param name="culture">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IMarkupExtension">
            <summary>Defines the interface for Forms xaml markup extensions.</summary>
            <remarks>
                <para>
      Types implementing this interface can be used as custom XAML markup extension.
    </para>
                <para>
                    <example lang="C#">
        The following example shows declaration of a custom markup extension.
              <code lang="C#"><![CDATA[
public class ColorMarkup : IMarkupExtension
{
  public int R { get; set; }
  public int G { get; set; }
  public int B { get; set; }

  public object ProvideValue (IServiceProvider serviceProvider)
  {
    return Color.FromRgb (R, G, B);
  }
}               
              ]]></code></example>
                    <example lang="XAML">
        The markup extension can be used directly in XAML
        <code lang="C#"><![CDATA[
<Label TextColor="{localns:ColorMarkup R=100, G=80, B=60}/>
        ]]></code></example>
                </para>
            </remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(System.IServiceProvider)">
            <param name="serviceProvider">To be added.</param>
            <summary>Returns the object created from the markup extension.</summary>
            <returns>The object</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Forms.Xaml.IProvideValueTarget">
            <summary>Interface that defines a target and property to which a value is provided.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IProvideValueTarget.TargetObject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IProvideValueTarget.TargetProperty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IRootObjectProvider">
            <summary>Interface that defines the ability to return a root object, for instance, the top-level <see cref="T:Xamarin.Forms.View" /> in a layout.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Forms.Xaml.IRootObjectProvider.RootObject">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Forms.Xaml.IXamlTypeResolver">
            <summary>Interface defining the ability to resolve a qualified type name into a Type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IXamlTypeResolver.Resolve(System.String)">
            <param name="qualifiedTypeName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Forms.Xaml.IXamlTypeResolver.TryResolve(System.String,System.Type@)">
            <param name="qualifiedTypeName">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
